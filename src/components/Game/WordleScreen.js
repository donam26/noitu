import React, { useState, useEffect, useCallback } from 'react';
import Button from '../common/Button';
import './WordleScreen.css';
import { gameDataAPI } from '../../services/api';

// C√°c h·∫±ng s·ªë tr√≤ ch∆°i
const GAME_STATUS = {
  IN_PROGRESS: 'IN_PROGRESS',
  WON: 'WON',
  LOST: 'LOST'
};

const LETTER_STATES = {
  CORRECT: 'correct',
  PRESENT: 'present',
  ABSENT: 'absent',
  UNUSED: 'unused'
};

// B·ªë c·ª•c b√†n ph√≠m ti·∫øng Vi·ªát
const VIETNAMESE_KEYBOARD_ROWS = [
  ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],
  ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'],
  ['ENTER', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'BACKSPACE']
];

// Simple confetti effect
const createConfetti = () => {
  const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff', '#ffa500', '#ff69b4'];
  const confettiCount = 150;

  for (let i = 0; i < confettiCount; i++) {
    const confetti = document.createElement('div');
    confetti.style.position = 'fixed';
    confetti.style.left = Math.random() * 100 + 'vw';
    confetti.style.top = '-10px';
    confetti.style.width = Math.random() * 12 + 4 + 'px';
    confetti.style.height = confetti.style.width;
    confetti.style.background = colors[Math.floor(Math.random() * colors.length)];
    confetti.style.borderRadius = Math.random() > 0.5 ? '50%' : '0';
    confetti.style.pointerEvents = 'none';
    confetti.style.zIndex = '9999';
    confetti.style.animation = `confetti-fall ${Math.random() * 2 + 2}s ease-out forwards`;
    confetti.style.transform = `rotate(${Math.random() * 360}deg)`;

    document.body.appendChild(confetti);

    setTimeout(() => {
      if (confetti.parentNode) {
        confetti.parentNode.removeChild(confetti);
      }
    }, 4000);
  }
};

// Sound effects (mock - can be replaced with real audio)
const playSound = (type) => {
  // Mock sound effects - c√≥ th·ªÉ thay b·∫±ng Web Audio API th·ª±c t·∫ø
  console.log(`üîä Playing ${type} sound`);
};

// State ban ƒë·∫ßu m·∫∑c ƒë·ªãnh
const initialGameState = {
    // S·ª≠a ƒë·ªô d√†i board t·ª´ c·ªë ƒë·ªãnh 5 k√Ω t·ª± th√†nh ƒë·ªông, t·ªëi ƒëa 8 k√Ω t·ª±
    board: Array(6).fill().map(() => Array(8).fill('')),
    currentRow: 0,
    currentCol: 0,
    targetWord: '',
    wordLength: 5, // Th√™m tr∆∞·ªùng ƒë·ªÉ l∆∞u ƒë·ªô d√†i t·ª´
    gameStatus: GAME_STATUS.IN_PROGRESS,
    letterStates: {},
    cellStates: Array(6).fill().map(() => Array(8).fill(LETTER_STATES.UNUSED)),
    startTime: new Date(),
    hints: [],
    hintCount: 0,
    isInitialized: false // Th√™m flag ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i kh·ªüi t·∫°o
};

const WordleScreen = () => {
  // State game
  const [gameState, setGameState] = useState({...initialGameState});

  const [message, setMessage] = useState('');
  const [showTutorial, setShowTutorial] = useState(true);
  const [isAnimating, setIsAnimating] = useState(false);
  const [showResultModal, setShowResultModal] = useState(false);
  const [wordMeaning, setWordMeaning] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isError, setIsError] = useState(false);
  const [gameTime, setGameTime] = useState('');
  const [showResults, setShowResults] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  // Hi·ªÉn th·ªã th√¥ng b√°o t·∫°m th·ªùi
  const showMessage = useCallback((text, type = 'info') => {
    setMessage({ text, type });
    setTimeout(() => setMessage(''), 3000);
  }, []);

  // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  useEffect(() => {
    if (errorMessage) {
      showMessage(errorMessage, 'error');
      // T·ª± ƒë·ªông x√≥a l·ªói sau 3 gi√¢y
      const timer = setTimeout(() => setErrorMessage(''), 3000);
      return () => clearTimeout(timer);
    }
  }, [errorMessage, showMessage]);

  // Kh·ªüi t·∫°o game
  const initializeGame = async () => {
    try {
      setIsLoading(true);
      setShowResultModal(false);
      setWordMeaning(null);
      setErrorMessage('');

      // Reset game state v·ªÅ m·∫∑c ƒë·ªãnh tr∆∞·ªõc khi l·∫•y t·ª´ m·ªõi
      setGameState({...initialGameState});

      // L·∫•y t·ª´ m·ªõi t·ª´ API
      const response = await gameDataAPI.getRandomWordleWord();
      console.log('API tr·∫£ v·ªÅ:', response);

      // Ki·ªÉm tra ph·∫£n h·ªìi
      if (!response) {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server');
      }

      if (!response.success) {
        const errorMsg = response.message || 'Kh√¥ng th·ªÉ t·∫£i t·ª´ m·ªõi';
        throw new Error(errorMsg);
      }

      // Ki·ªÉm tra d·ªØ li·ªáu
      if (!response.data) {
        console.error('Response kh√¥ng c√≥ data:', response);
        throw new Error('D·ªØ li·ªáu t·ª´ kh√¥ng h·ª£p l·ªá - kh√¥ng c√≥ response.data');
      }

      if (!response.data.word) {
        console.error('Data kh√¥ng c√≥ word:', response.data);
        throw new Error('D·ªØ li·ªáu t·ª´ kh√¥ng h·ª£p l·ªá - kh√¥ng c√≥ response.data.word');
      }

      const word = response.data.word;
      console.log('T·ª´ ƒë∆∞·ª£c ch·ªçn:', word);

      // Lo·∫°i b·ªè d·∫•u c√°ch cho vi·ªác t√≠nh to√°n ƒë·ªô d√†i th·ª±c t·∫ø
      const cleanWord = word.replace(/\s+/g, '');
      const wordLength = cleanWord.length;

      if (wordLength < 2 || wordLength > 8) {
        throw new Error(`ƒê·ªô d√†i t·ª´ kh√¥ng ph√π h·ª£p: ${wordLength} k√Ω t·ª±`);
      }

      // C·∫≠p nh·∫≠t state game v·ªõi t·ª´ m·ªõi v√† ƒë·ªô d√†i t·ª´
      setGameState(prevState => ({
        ...prevState,
        targetWord: word,
        wordLength: wordLength,
        hints: response.data.hints || [],
        startTime: new Date(),
        gameStatus: GAME_STATUS.IN_PROGRESS, // ƒê·∫£m b·∫£o tr·∫°ng th√°i l√† IN_PROGRESS
        board: Array(6).fill().map(() => Array(8).fill('')),
        cellStates: Array(6).fill().map(() => Array(8).fill(LETTER_STATES.UNUSED)),
        isInitialized: true // ƒê√°nh d·∫•u ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng
      }));

      console.log(`Kh·ªüi t·∫°o game v·ªõi t·ª´: ${word} (ƒë·ªô d√†i: ${wordLength})`);
      setIsLoading(false);
    } catch (error) {
      console.error('L·ªói khi kh·ªüi t·∫°o game:', error);
      setIsError(true);
      setIsLoading(false);
      setErrorMessage(`Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√≤ ch∆°i: ${error.message}. Vui l√≤ng th·ª≠ l·∫°i sau.`);
    }
  };

  // Reset game
  const resetGame = useCallback(async () => {
    await initializeGame();
    setMessage('');
    setShowResultModal(false);
    setWordMeaning(null);
  }, []);

  // Kh·ªüi t·∫°o game khi component mount
  useEffect(() => {
    initializeGame();

    // Cleanup function
    return () => {
      // D·ªçn d·∫πp c√°c timeout, event listeners khi component unmount
      setShowResultModal(false);
    };
  }, []);


  // Hi·ªÉn th·ªã modal k·∫øt qu·∫£ khi game k·∫øt th√∫c
  useEffect(() => {
    if (gameState.gameStatus === GAME_STATUS.WON || gameState.gameStatus === GAME_STATUS.LOST) {
      // Th√™m m·ªôt ƒë·ªô tr·ªÖ nh·ªè ƒë·ªÉ animation ho√†n t·∫•t
      const timer = setTimeout(() => {
        setShowResultModal(true);
      }, 1200); // 1200ms ƒë·ªÉ ch·ªù animation l·∫≠t ch·ªØ

      return () => clearTimeout(timer);
    }
  }, [gameState.gameStatus]);

  // T√≠nh th·ªùi gian ƒë√£ tr√¥i qua
  const getElapsedTime = () => {
    const now = new Date();
    const elapsedMs = now - new Date(gameState.startTime);
    const minutes = Math.floor(elapsedMs / 60000);
    const seconds = Math.floor((elapsedMs % 60000) / 1000);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  };

  // X·ª≠ l√Ω nh·∫≠p ch·ªØ c√°i
  const handleLetterInput = async (letter) => {
    if (gameState.gameStatus !== GAME_STATUS.IN_PROGRESS) return;

    const { currentRow, currentCol, board, wordLength } = gameState;

    if (currentCol < wordLength) {
      const newBoard = [...board];
      newBoard[currentRow][currentCol] = letter;

      setGameState(prevState => ({
        ...prevState,
        board: newBoard,
        currentCol: currentCol + 1
      }));

      playSound('key');
    }
  };

  // X·ª≠ l√Ω x√≥a
  const handleBackspace = () => {
    if (gameState.gameStatus !== GAME_STATUS.IN_PROGRESS) return;

    const { currentRow, currentCol, board } = gameState;

    if (currentCol > 0) {
      const newBoard = [...board];
      newBoard[currentRow][currentCol - 1] = '';

      setGameState(prevState => ({
        ...prevState,
        board: newBoard,
        currentCol: currentCol - 1
      }));

      playSound('backspace');
    }
  };

  // X·ª≠ l√Ω g·ª≠i ƒëo√°n
  const handleSubmitGuess = async () => {
    if (gameState.gameStatus !== GAME_STATUS.IN_PROGRESS) return;

    const { currentRow, currentCol, board, targetWord, wordLength } = gameState;

    if (currentCol < wordLength) {
      showMessage(`B·∫°n ch∆∞a ƒëi·ªÅn ƒë·ªß ${wordLength} k√Ω t·ª±!`, 'error');
      return;
    }

    // L·∫•y ƒëo√°n hi·ªán t·∫°i, ch·ªâ l·∫•y c√°c k√Ω t·ª± ƒë√£ nh·∫≠p
    const currentGuessArray = board[currentRow].slice(0, wordLength);
    const currentGuess = currentGuessArray.join('');

    // Hi·ªÉn th·ªã tr·∫°ng th√°i ki·ªÉm tra
    setIsAnimating(false);
    showMessage('ƒêang ki·ªÉm tra...', 'info');

    try {
      // Ki·ªÉm tra t·ª´ h·ª£p l·ªá
      console.log(`Ki·ªÉm tra t·ª´ "${currentGuess}"`);
      const validResponse = await gameDataAPI.validateWordleGuess(currentGuess);
      console.log('K·∫øt qu·∫£ ki·ªÉm tra t·ª´ h·ª£p l·ªá:', validResponse);

      // N·∫øu t·ª´ kh√¥ng h·ª£p l·ªá, th√¥ng b√°o v√† kh√¥ng ti·∫øp t·ª•c
      if (!validResponse.success || (validResponse.data && validResponse.data.valid === false)) {
        const errorMsg = validResponse.data?.message || 'T·ª´ kh√¥ng h·ª£p l·ªá!';
        showMessage(errorMsg, 'error');
        setIsAnimating(true);
        setTimeout(() => setIsAnimating(false), 500);
        return;
      }

      // T·ª´ h·ª£p l·ªá, ti·∫øp t·ª•c ki·ªÉm tra v·ªõi t·ª´ ƒë√≠ch
      console.log(`G·ª≠i ƒëo√°n "${currentGuess}" v·ªõi t·ª´ ƒë√≠ch "${targetWord}"`);

      // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
      showMessage('ƒêang x·ª≠ l√Ω...', 'info');

      try {
        // G·ª≠i ƒëo√°n v√† nh·∫≠n k·∫øt qu·∫£
        const response = await gameDataAPI.checkWordleGuess({
          guess: currentGuess,
          targetWord: targetWord
        });

        // Ki·ªÉm tra ph·∫£n h·ªìi
        if (!response || !response.success || !response.data) {
          throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi ƒë√∫ng ƒë·ªãnh d·∫°ng t·ª´ server');
        }

        // X·ª≠ l√Ω k·∫øt qu·∫£
        const { result, letterStates, isCorrect } = response.data;

        console.log('K·∫øt qu·∫£ ki·ªÉm tra t·ª´:', response.data);

        if (!result || !Array.isArray(result)) {
          throw new Error('K·∫øt qu·∫£ kh√¥ng h·ª£p l·ªá - kh√¥ng c√≥ m·∫£ng result');
        }

        // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        setMessage('');

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i √¥
        const newCellStates = [...gameState.cellStates];
        result.forEach((state, index) => {
          if (index < wordLength) {
            newCellStates[currentRow][index] = state;
          }
        });

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ch·ªØ c√°i
        const newLetterStates = { ...gameState.letterStates };

        // K·∫øt h·ª£p c√°c tr·∫°ng th√°i ch·ªØ c√°i m·ªõi, ∆∞u ti√™n tr·∫°ng th√°i cao h∆°n
        if (letterStates) {
          Object.entries(letterStates).forEach(([key, value]) => {
            // Quy t·∫Øc ∆∞u ti√™n: CORRECT > PRESENT > ABSENT > UNUSED
            const currentState = newLetterStates[key] || 'unused';
            const states = ['unused', 'absent', 'present', 'correct'];
            const currentIdx = states.indexOf(currentState);
            const newIdx = states.indexOf(value);

            if (newIdx > currentIdx) {
              newLetterStates[key] = value;
            }
          });
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i tr√≤ ch∆°i
        let newGameStatus = gameState.gameStatus;

        if (isCorrect) {
          newGameStatus = GAME_STATUS.WON;
          setGameTime(getElapsedTime());
          playSound('win');
          createConfetti();


          // L·∫•y nghƒ©a c·ªßa t·ª´
          try {
            const meaningResponse = await gameDataAPI.getWordMeaning(targetWord);
            if (meaningResponse.success) {
              setWordMeaning(meaningResponse.data);
            }
          } catch (err) {
            console.error('Kh√¥ng th·ªÉ l·∫•y nghƒ©a c·ªßa t·ª´:', err);
          }
        } else if (currentRow === 5) {
          // H·∫øt l∆∞·ª£t
          newGameStatus = GAME_STATUS.LOST;
          setGameTime(getElapsedTime());
          playSound('lose');


          // L·∫•y nghƒ©a c·ªßa t·ª´
          try {
            const meaningResponse = await gameDataAPI.getWordMeaning(targetWord);
            if (meaningResponse.success) {
              setWordMeaning(meaningResponse.data);
            }
          } catch (err) {
            console.error('Kh√¥ng th·ªÉ l·∫•y nghƒ©a c·ªßa t·ª´:', err);
          }
        }

        setGameState(prevState => ({
          ...prevState,
          cellStates: newCellStates,
          letterStates: newLetterStates,
          currentRow: currentRow + 1,
          currentCol: 0,
          gameStatus: newGameStatus
        }));

        playSound('submit');
      } catch (checkError) {
        console.error('L·ªói khi ki·ªÉm tra ƒëo√°n v·ªõi t·ª´ ƒë√≠ch:', checkError);

        // C·ªë g·∫Øng s·ª≠ d·ª•ng client-side check trong tr∆∞·ªùng h·ª£p l·ªói
        try {
          console.log('Th·ª≠ s·ª≠ d·ª•ng client-side check');

          // Import l·∫°i h√†m t·ª´ api.js
          const clientResult = window.checkWordleGuessClientSide
            ? window.checkWordleGuessClientSide(currentGuess, targetWord)
            : {
                result: Array(wordLength).fill('absent'),
                letterStates: {},
                isCorrect: false
              };

          console.log('Client-side check result:', clientResult);

          if (!clientResult || !clientResult.result) {
            throw new Error('Ki·ªÉm tra client-side th·∫•t b·∫°i');
          }

          // C·∫≠p nh·∫≠t tr·∫°ng th√°i √¥
          const newCellStates = [...gameState.cellStates];
          clientResult.result.forEach((state, index) => {
            if (index < wordLength) {
              newCellStates[currentRow][index] = state;
            }
          });

          // C·∫≠p nh·∫≠t tr·∫°ng th√°i ch·ªØ c√°i
          const newLetterStates = { ...gameState.letterStates };

          if (clientResult.letterStates) {
            Object.entries(clientResult.letterStates).forEach(([key, value]) => {
              const currentState = newLetterStates[key] || 'unused';
              const states = ['unused', 'absent', 'present', 'correct'];
              const currentIdx = states.indexOf(currentState);
              const newIdx = states.indexOf(value);

              if (newIdx > currentIdx) {
                newLetterStates[key] = value;
              }
            });
          }

          // C·∫≠p nh·∫≠t game state
          setGameState(prevState => ({
            ...prevState,
            cellStates: newCellStates,
            letterStates: newLetterStates,
            currentRow: currentRow + 1,
            currentCol: 0
          }));

          playSound('submit');
          setMessage(''); // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        } catch (clientSideError) {
          console.error('C·∫£ client-side check c≈©ng th·∫•t b·∫°i:', clientSideError);
          setErrorMessage('C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra t·ª´. Vui l√≤ng th·ª≠ l·∫°i.');
          setIsAnimating(true);
          setTimeout(() => setIsAnimating(false), 500);
        }
      }
    } catch (error) {
      console.error('L·ªói khi x·ª≠ l√Ω ƒëo√°n:', error);
      setErrorMessage('C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra t·ª´. Vui l√≤ng th·ª≠ l·∫°i.');
      setIsAnimating(true);
      setTimeout(() => setIsAnimating(false), 500);
    }
  };

  // X·ª≠ l√Ω g·ª£i √Ω
  const handleHint = async () => {
    if (gameState.gameStatus !== GAME_STATUS.IN_PROGRESS) return;

    if (gameState.hintCount >= 3) {
      showMessage('B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt g·ª£i √Ω!', 'error');
      return;
    }

    try {
      const response = await gameDataAPI.getWordleHint({
        targetWord: gameState.targetWord,
        hintCount: gameState.hintCount
      });

      if (!response.success) {
        throw new Error('L·ªói khi l·∫•y g·ª£i √Ω');
      }

      showMessage(response.data.hint, 'hint');

      setGameState(prevState => ({
        ...prevState,
        hintCount: prevState.hintCount + 1
      }));
    } catch (error) {
      console.error('L·ªói khi l·∫•y g·ª£i √Ω:', error);
      showMessage('Kh√¥ng th·ªÉ l·∫•y g·ª£i √Ω l√∫c n√†y', 'error');
    }
  };

  // X·ª≠ l√Ω nh·∫•n ph√≠m
  useEffect(() => {
    const handleKeyDown = (event) => {
      const key = event.key.toLowerCase();

      if (gameState.gameStatus !== GAME_STATUS.IN_PROGRESS) return;

      if (key === 'enter') {
        handleSubmitGuess();
      } else if (key === 'backspace') {
        handleBackspace();
      } else if (/^[a-z]$/.test(key)) {
        handleLetterInput(key);
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [gameState]);

  // L·∫•y tr·∫°ng th√°i √¥
  const getCellState = (rowIndex, colIndex) => {
    return gameState.cellStates[rowIndex][colIndex];
  };

  // L·∫•y tr·∫°ng th√°i ph√≠m
  const getKeyState = (key) => {
    return gameState.letterStates[key] || LETTER_STATES.UNUSED;
  };

  // Render b√†n ph√≠m
  const renderKeyboard = () => (
    <div className="wordle-keyboard">
      {VIETNAMESE_KEYBOARD_ROWS.map((row, rowIndex) => (
        <div key={`keyboard-row-${rowIndex}`} className="keyboard-row">
          {row.map(key => (
            <button
              key={`key-${key}`}
              className={`keyboard-key ${key === 'ENTER' || key === 'BACKSPACE' ? 'keyboard-key-wide' : ''} ${getKeyState(key)}`}
              onClick={() => {
                if (key === 'ENTER') handleSubmitGuess();
                else if (key === 'BACKSPACE') handleBackspace();
                else handleLetterInput(key);
              }}
              disabled={gameState.gameStatus !== GAME_STATUS.IN_PROGRESS}
            >
              {key === 'BACKSPACE' ? '‚å´' : key}
            </button>
          ))}
        </div>
      ))}
    </div>
  );

  // Render b·∫£ng ch∆°i
  const renderBoard = () => (
    <div className={`wordle-board ${isAnimating ? 'shake' : ''}`}>
      {gameState.board.map((row, rowIndex) => (
        <div key={`row-${rowIndex}`} className="wordle-row">
          {row.slice(0, gameState.wordLength).map((letter, colIndex) => (
            <div
              key={`cell-${rowIndex}-${colIndex}`}
              className={`wordle-cell ${getCellState(rowIndex, colIndex)}`}
            >
              {letter}
            </div>
          ))}
        </div>
      ))}
    </div>
  );

  // Modal h∆∞·ªõng d·∫´n
  const TutorialModal = () => (
    <div className={`modal-overlay ${showTutorial ? 'visible' : ''}`}>
      <div className="modal-content tutorial">
        <h2>H∆∞·ªõng d·∫´n ch∆°i Wordle</h2>
        <p>ƒêo√°n t·ª´ 5 ch·ªØ c√°i trong 6 l·∫ßn th·ª≠.</p>
        <div className="tutorial-steps">
          <div className="tutorial-step">
            <p>Sau m·ªói l·∫ßn ƒëo√°n, m√†u s·∫Øc c·ªßa √¥ s·∫Ω thay ƒë·ªïi ƒë·ªÉ cho bi·∫øt g·ª£i √Ω:</p>
            <div className="examples">
              <div className="example">
                <div className="wordle-cell correct">A</div>
                <p>Ch·ªØ c√°i ƒë√∫ng v·ªã tr√≠.</p>
              </div>
              <div className="example">
                <div className="wordle-cell present">B</div>
                <p>Ch·ªØ c√°i ƒë√∫ng nh∆∞ng sai v·ªã tr√≠.</p>
              </div>
              <div className="example">
                <div className="wordle-cell absent">C</div>
                <p>Ch·ªØ c√°i kh√¥ng c√≥ trong t·ª´.</p>
              </div>
            </div>
          </div>
        </div>
        <div className="tutorial-buttons">
          <Button
            variant="primary"
            onClick={() => setShowTutorial(false)}
          >
            B·∫Øt ƒë·∫ßu ch∆°i
          </Button>
        </div>
      </div>
    </div>
  );

  // Modal k·∫øt qu·∫£
  const ResultModal = () => {
    // Ch·ªâ hi·ªÉn th·ªã khi game th·ª±c s·ª± k·∫øt th√∫c v√† ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng
    if (!showResultModal || !gameState.isInitialized) return null;

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán hi·ªÉn th·ªã k·∫øt qu·∫£
    if (gameState.gameStatus !== GAME_STATUS.WON && gameState.gameStatus !== GAME_STATUS.LOST) {
      console.warn('K·∫øt qu·∫£ hi·ªÉn th·ªã khi game ch∆∞a k·∫øt th√∫c!');
      return null;
    }

    const isWon = gameState.gameStatus === GAME_STATUS.WON;

    return (
      <div className="modal-overlay visible">
        <div className="modal-content result">
          <h2>{isWon ? 'üéâ Ch√∫c m·ª´ng!' : 'üòû R·∫•t ti·∫øc!'}</h2>

          <div className="result-details">
            {isWon
              ? <p>B·∫°n ƒë√£ ƒëo√°n ƒë√∫ng t·ª´ <strong>{gameState.targetWord}</strong> trong {gameState.currentRow} l∆∞·ª£t!</p>
              : <p>B·∫°n kh√¥ng th·ªÉ ƒëo√°n ƒë∆∞·ª£c t·ª´ <strong>{gameState.targetWord}</strong>.</p>
            }
            <p>Th·ªùi gian ch∆°i: {gameTime}</p>
          </div>

          {wordMeaning && (
            <div className="word-meaning">
              <h4>√ù nghƒ©a:</h4>
              <p>{wordMeaning.definition || wordMeaning.meaning || 'Kh√¥ng c√≥ ƒë·ªãnh nghƒ©a'}</p>
              {wordMeaning.example && (
                <div className="example">
                  <h4>V√≠ d·ª•:</h4>
                  <p>{wordMeaning.example}</p>
                </div>
              )}
            </div>
          )}

          <div className="result-actions">
            <Button onClick={resetGame} variant="primary">Ch∆°i l·∫°i</Button>
            <Button onClick={() => setShowResults(!showResults)} variant="secondary">
              {showResults ? '·∫®n chi ti·∫øt' : 'Xem chi ti·∫øt'}
            </Button>
          </div>

          {showResults && (
            <div className="result-board">
              {gameState.cellStates.slice(0, gameState.currentRow).map((row, rowIndex) => (
                <div key={`result-row-${rowIndex}`} className="result-row">
                  {row.slice(0, gameState.wordLength).map((state, colIndex) => (
                    <div
                      key={`result-cell-${rowIndex}-${colIndex}`}
                      className={`result-cell ${state}`}
                    >
                      {gameState.board[rowIndex][colIndex]}
                    </div>
                  ))}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    );
  };

  // Render giao di·ªán ch√≠nh
  return (
    <div className="wordle-container">
      {/* Loading screen */}
      {isLoading ? (
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>ƒêang t·∫£i t·ª´ m·ªõi...</p>
        </div>
      ) : isError ? (
        // M√†n h√¨nh l·ªói
        <div className="error-container">
          <p className="error-message">{errorMessage}</p>
          <Button onClick={resetGame}>Th·ª≠ l·∫°i</Button>
        </div>
      ) : (
        // M√†n h√¨nh game
        <>
          <h1 className="game-title">Wordle Ti·∫øng Vi·ªát</h1>

          {/* Hi·ªÉn th·ªã th√¥ng b√°o */}
          {message && (
            <div className={`message ${message.type}`}>
              {message.text}
            </div>
          )}

          {/* B·∫£ng ch∆°i */}
          {renderBoard()}

          {/* B√†n ph√≠m ·∫£o */}
          {renderKeyboard()}

          {/* N√∫t g·ª£i √Ω */}
          <div className="hint-container">
            <Button
              onClick={handleHint}
              disabled={gameState.hintCount >= 3 || gameState.gameStatus !== GAME_STATUS.IN_PROGRESS}
            >
              G·ª£i √Ω ({3 - gameState.hintCount})
            </Button>
          </div>

          {/* Modal h∆∞·ªõng d·∫´n */}
          {showTutorial && <TutorialModal />}

          {/* Modal k·∫øt qu·∫£ */}
          {showResultModal && <ResultModal />}
        </>
      )}
    </div>
  );
};

export default WordleScreen;