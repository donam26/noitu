import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { API_BASE_URL } from '../../utils/constants';
import Timer from '../common/Timer';
import Button from '../common/Button';
import Modal from '../common/Modal';
import { showError } from '../../utils/toast';
import './WordScrambleScreen.css';

const WordScrambleScreen = ({ onBackHome }) => {
  const [originalWord, setOriginalWord] = useState('');
  const [scrambledWord, setScrambledWord] = useState('');
  const [formattedDisplay, setFormattedDisplay] = useState('');
  const [userInput, setUserInput] = useState('');
  const [message, setMessage] = useState('');
  const [hint, setHint] = useState('');
  const [score, setScore] = useState(0);
  const [timeLeft, setTimeLeft] = useState(30);
  const [showHint, setShowHint] = useState(false);
  const [gameState, setGameState] = useState('playing'); // 'playing', 'won', 'lost'
  const [showModal, setShowModal] = useState(false);
  const [modalContent, setModalContent] = useState({});
  
  const inputRef = useRef(null);
  const timerKey = useRef(0);

  // T·∫£i t·ª´ m·ªõi khi component mount
  useEffect(() => {
    startNewRound();
  }, []);

  // B·∫Øt ƒë·∫ßu v√≤ng ch∆°i m·ªõi
  const startNewRound = async () => {
    try {
      // L·∫•y t·ª´ ng·∫´u nhi√™n t·ª´ API
      const response = await axios.get(`${API_BASE_URL}/games/word-scramble/random`);
      const wordData = response.data;
      
      setOriginalWord(wordData.originalWord);
      setScrambledWord(wordData.scrambledWord);
      setFormattedDisplay(wordData.formattedDisplay);
      
      // Thi·∫øt l·∫≠p tr·∫°ng th√°i m·ªõi
      setUserInput('');
      setMessage('');
      setHint('');
      setShowHint(false);
      setTimeLeft(30);
      setGameState('playing');
      timerKey.current += 1;

      // Focus v√†o √¥ input
      if (inputRef.current) {
        inputRef.current.focus();
      }
    } catch (error) {
      console.error('L·ªói khi b·∫Øt ƒë·∫ßu v√≤ng ch∆°i m·ªõi:', error);
      setModalContent({
        title: 'C√≥ l·ªói x·∫£y ra',
        message: 'Kh√¥ng th·ªÉ t·∫£i t·ª´ m·ªõi. Vui l√≤ng th·ª≠ l·∫°i.'
      });
      setShowModal(true);
    }
  };

  // X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i g·ª≠i c√¢u tr·∫£ l·ªùi
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (gameState !== 'playing') return;
    
    if (!userInput.trim()) {
      setModalContent({
        title: 'Thi·∫øu th√¥ng tin',
        message: 'Vui l√≤ng nh·∫≠p ƒë√°p √°n!'
      });
      setShowModal(true);
      return;
    }
    
    try {
      // G·ª≠i c√¢u tr·∫£ l·ªùi ƒë·∫øn API ƒë·ªÉ ki·ªÉm tra
      const response = await axios.post(`${API_BASE_URL}/games/word-scramble/check`, {
        originalWord,
        userAnswer: userInput,
        timeLeft
      });
      
      const result = response.data;
      
      if (result.correct) {
        // Ch·ªâ c·ªông 1 ƒëi·ªÉm v√† b·∫Øt ƒë·∫ßu v√≤ng ch∆°i m·ªõi ngay l·∫≠p t·ª©c
        setScore(prevScore => prevScore + 1);
        startNewRound(); // B·∫Øt ƒë·∫ßu v√≤ng ch∆°i m·ªõi ngay l·∫≠p t·ª©c
      } else {
        // Hi·ªÉn th·ªã toast th√¥ng b√°o khi sai
        showError('ƒê√°p √°n kh√¥ng ch√≠nh x√°c. H√£y th·ª≠ l·∫°i.');
      }
    } catch (error) {
      console.error('L·ªói khi ki·ªÉm tra c√¢u tr·∫£ l·ªùi:', error);
      setModalContent({
        title: 'C√≥ l·ªói x·∫£y ra',
        message: 'Kh√¥ng th·ªÉ ki·ªÉm tra c√¢u tr·∫£ l·ªùi. Vui l√≤ng th·ª≠ l·∫°i.'
      });
      setShowModal(true);
    }
  };

  // Hi·ªÉn th·ªã g·ª£i √Ω
  const showWordHint = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/games/word-scramble/hint/${originalWord}`);
      setHint(response.data.hint);
      setShowHint(true);
    } catch (error) {
      console.error('L·ªói khi l·∫•y g·ª£i √Ω:', error);
      setModalContent({
        title: 'C√≥ l·ªói x·∫£y ra',
        message: 'Kh√¥ng th·ªÉ l·∫•y g·ª£i √Ω. Vui l√≤ng th·ª≠ l·∫°i.'
      });
      setShowModal(true);
    }
  };

  // Ch∆°i l·∫°i v·ªõi t·ª´ m·ªõi
  const handlePlayAgain = () => {
    setShowModal(false);
    startNewRound();
  };
  
  // X·ª≠ l√Ω khi h·∫øt th·ªùi gian
  const handleTimeUp = () => {
    setGameState('lost');
    
    // Hi·ªÉn th·ªã toast th√¥ng b√°o ƒë√°p √°n ƒë√∫ng khi h·∫øt gi·ªù
    showError(`H·∫øt gi·ªù! T·ª´ ƒë√∫ng l√†: "${originalWord}"`);
    
    // Hi·ªÉn th·ªã modal k·∫øt qu·∫£ tr√≤ ch∆°i v·ªõi ƒëi·ªÉm s·ªë
    setModalContent({
      title: 'K·∫øt th√∫c tr√≤ ch∆°i!',
      message: `ƒê√£ h·∫øt th·ªùi gian!\n\nƒêi·ªÉm c·ªßa b·∫°n: ${score}\n\nT·ª´ ƒë√∫ng l√†: "${originalWord}"\n\nB·∫°n c√≥ mu·ªën ch∆°i l·∫°i?`,
      isGameOver: true
    });
    setShowModal(true);
  };
  
  // ƒê√≥ng modal
  const handleCloseModal = () => {
    setShowModal(false);
    
    if (gameState === 'won') {
      startNewRound();
    }
  };

  // C·∫≠p nh·∫≠t th·ªùi gian c√≤n l·∫°i t·ª´ Timer
  const handleTimeUpdate = (time) => {
    setTimeLeft(time);
  };

  return (
    <div className="game-screen">
      <div className="game-container">
        {/* Header */}
        <div className="game-header">
          <Button 
            variant="secondary" 
            onClick={onBackHome}
            className="back-btn"
          >
            üè† Trang ch·ªß
          </Button>
          <div className="score">
            ƒêi·ªÉm: {score}
          </div>
        </div>

        {/* Timer */}
        {gameState === 'playing' && (
          <Timer
            key={timerKey.current}
            duration={30}
            onTimeUp={handleTimeUp}
            onTimeUpdate={handleTimeUpdate}
            isActive={gameState === 'playing' && !showModal}
          />
        )}
        
        {/* T·ª´ ƒë·∫£o l·ªôn */}
        <div className="current-word-section">
          <h2 className="section-title">S·∫Øp x·∫øp l·∫°i th√†nh t·ª´ c√≥ nghƒ©a:</h2>
          <div className="current-word">
            {formattedDisplay}
          </div>
          
          {/* G·ª£i √Ω */}
          {showHint && (
            <div className="word-meaning">
              <strong>G·ª£i √Ω:</strong> {hint}
            </div>
          )}
        </div>

        {/* Form nh·∫≠p c√¢u tr·∫£ l·ªùi */}
        {gameState === 'playing' && (
          <form onSubmit={handleSubmit} className="input-form">
            <div className="input-group">
              <input
                ref={inputRef}
                type="text"
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                placeholder="Nh·∫≠p ƒë√°p √°n..."
                disabled={gameState !== 'playing'}
                className="word-input"
              />
              <div className="button-container">
                <Button 
                  type="submit" 
                  variant="primary"
                  disabled={!userInput.trim()}
                >
                  G·ª≠i
                </Button>
                
                <Button 
                  type="button" 
                  variant="secondary"
                  onClick={showWordHint} 
                  disabled={showHint}
                >
                  G·ª£i √Ω
                </Button>
              </div>
            </div>
          </form>
        )}
        
        {/* Game Over Actions */}
        {gameState !== 'playing' && (
          <div className="game-over-actions">
            <Button 
              variant="primary" 
              onClick={handlePlayAgain}
              className="action-btn"
            >
              üîÑ Ch∆°i l·∫°i
            </Button>
          </div>
        )}

        {/* Modal */}
        <Modal
          isOpen={showModal}
          title={modalContent.title}
          message={modalContent.message}
          onClose={handleCloseModal}
          confirmText={modalContent.isGameOver ? "Ch∆°i l·∫°i" : null}
          onConfirm={modalContent.isGameOver ? handlePlayAgain : null}
          cancelText={modalContent.isGameOver ? "V·ªÅ trang ch·ªß" : "Ti·∫øp t·ª•c"}
          onCancel={modalContent.isGameOver ? onBackHome : handleCloseModal}
        />
      </div>
    </div>
  );
};

export default WordScrambleScreen; 