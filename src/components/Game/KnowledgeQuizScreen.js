import React, { useState, useEffect, useRef } from 'react';
import Timer from '../common/Timer';
import Button from '../common/Button';
import Modal from '../common/Modal';
import { GAME_CONFIG } from '../../utils/constants';
import { knowledgeAPI } from '../../services/api';
import { showError } from '../../utils/toast';
import './QuizScreen.css';

/**
 * Component KnowledgeQuizScreen - M√†n h√¨nh ch∆°i game Vua Ki·∫øn Th·ª©c
 * @param {Object} props - Props c·ªßa component
 * @param {Function} props.onBackHome - Callback khi quay v·ªÅ trang ch·ªß
 */
const KnowledgeQuizScreen = ({ onBackHome }) => {
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [currentOptions, setCurrentOptions] = useState([]);
  const [currentCorrectIndex, setCurrentCorrectIndex] = useState(-1);
  const [selectedAnswer, setSelectedAnswer] = useState(-1);
  const [correctAnswers, setCorrectAnswers] = useState(0);
  const [totalScore, setTotalScore] = useState(0);
  const [questionNumber, setQuestionNumber] = useState(1);
  const [isGameOver, setIsGameOver] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [modalContent, setModalContent] = useState({});
  const [gameStarted, setGameStarted] = useState(false);
  const [isAnswered, setIsAnswered] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [timeRemaining, setTimeRemaining] = useState(GAME_CONFIG.TIME_LIMIT);
  const [usedQuestionIds, setUsedQuestionIds] = useState([]);
  
  const timerKey = useRef(0);
  const maxQuestions = GAME_CONFIG.KNOWLEDGE_QUIZ?.MAX_QUESTIONS || 10;

  // Kh·ªüi t·∫°o game
  useEffect(() => {
    loadNewQuestion();
  }, []);

  // H√†m c·∫≠p nh·∫≠t th·ªùi gian c√≤n l·∫°i t·ª´ Timer
  const handleTimeUpdate = (time) => {
    setTimeRemaining(time);
  };

  /**
   * H√†m x√°o tr·ªôn m·∫£ng (Fisher-Yates shuffle algorithm)
   * @param {Array} array - M·∫£ng c·∫ßn x√°o tr·ªôn
   * @returns {Array} M·∫£ng ƒë√£ ƒë∆∞·ª£c x√°o tr·ªôn
   */
  const shuffleArray = (array) => {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
  };

  /**
   * T·∫£i c√¢u h·ªèi m·ªõi
   */
  const loadNewQuestion = async () => {
    setIsLoading(true);
    
    if (questionNumber > maxQuestions) {
      endGame();
      setIsLoading(false);
      return;
    }
    
    try {
      console.log("ƒêang l·∫•y c√¢u h·ªèi t·ª´ knowledgeAPI, exclude:", usedQuestionIds);
      const response = await knowledgeAPI.getRandomQuestion(usedQuestionIds);
      
      console.log("Ph·∫£n h·ªìi t·ª´ API:", response);
      
      if (!response.success || !response.data || !response.data.question) {
        console.error('Kh√¥ng th·ªÉ l·∫•y c√¢u h·ªèi m·ªõi:', response.message);
        setModalContent({
          title: 'L·ªói khi t·∫£i c√¢u h·ªèi',
          message: `Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi: ${response.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}\n\nVui l√≤ng th·ª≠ l·∫°i sau.`,
          isError: true
        });
        setShowModal(true);
        setIsLoading(false);
        return;
      }
      
      const question = response.data.question;
      const questionId = response.data.id || response.data.index;
      
      console.log("ƒê√£ nh·∫≠n c√¢u h·ªèi:", question);
      console.log("ID c√¢u h·ªèi:", questionId);
      
      if (!question || !question.options || !Array.isArray(question.options)) {
        console.error('C√¢u h·ªèi kh√¥ng h·ª£p l·ªá:', question);
        setModalContent({
          title: 'L·ªói d·ªØ li·ªáu',
          message: 'D·ªØ li·ªáu c√¢u h·ªèi kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i sau.',
          isError: true
        });
        setShowModal(true);
        setIsLoading(false);
        return;
      }
      
      // Th√™m ID c√¢u h·ªèi v√†o danh s√°ch ƒë√£ s·ª≠ d·ª•ng
      if (questionId) {
        setUsedQuestionIds(prev => [...prev, questionId]);
      }
      
      // Set c√¢u h·ªèi hi·ªán t·∫°i
      setCurrentQuestion(question);
      
      // X·ª≠ l√Ω c√°c l·ª±a ch·ªçn v√† ƒë√°p √°n ƒë√∫ng
      // V√¨ backend kh√¥ng c√≥ endpoint shuffle-options, n√™n x·ª≠ l√Ω tr·ª±c ti·∫øp tr√™n client
      const correctAnswer = question.correctAnswer !== undefined ? question.correctAnswer : 0;
      const originalOptions = [...question.options];
      
      // L∆∞u ƒë√°p √°n ƒë√∫ng tr∆∞·ªõc khi x√°o tr·ªôn
      const correctOption = originalOptions[correctAnswer];
      
      // X√°o tr·ªôn c√°c l·ª±a ch·ªçn
      const shuffledOptions = shuffleArray(originalOptions);
      
      // T√¨m v·ªã tr√≠ m·ªõi c·ªßa ƒë√°p √°n ƒë√∫ng sau khi x√°o tr·ªôn
      const newCorrectIndex = shuffledOptions.indexOf(correctOption);
      
      setCurrentOptions(shuffledOptions);
      setCurrentCorrectIndex(newCorrectIndex);
      
      // Reset tr·∫°ng th√°i c√¢u h·ªèi
      setSelectedAnswer(-1);
      setIsAnswered(false);
      setGameStarted(true);
      timerKey.current += 1;
    } catch (error) {
      console.error('L·ªói khi t·∫£i c√¢u h·ªèi m·ªõi:', error);
      setModalContent({
        title: 'L·ªói k·∫øt n·ªëi',
        message: 'Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi m·ªõi. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i.',
        isError: true
      });
      setShowModal(true);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i ch·ªçn c√¢u tr·∫£ l·ªùi
   * @param {number} answerIndex - Ch·ªâ s·ªë c√¢u tr·∫£ l·ªùi ƒë∆∞·ª£c ch·ªçn
   */
  const handleAnswerSelect = async (answerIndex) => {
    if (isAnswered || isGameOver) return;
    
    setSelectedAnswer(answerIndex);
    setIsAnswered(true);
    
    // V√¨ backend kh√¥ng c√≥ endpoint check-answer, n√™n ki·ªÉm tra ƒë√°p √°n tr·ª±c ti·∫øp tr√™n client
    const isCorrect = answerIndex === currentCorrectIndex;
      
      if (isCorrect) {
      // C·ªông ƒëi·ªÉm khi tr·∫£ l·ªùi ƒë√∫ng
        setCorrectAnswers(prev => prev + 1);
        setTotalScore(prev => prev + 1);
      } else {
      // Hi·ªÉn th·ªã th√¥ng b√°o khi sai
      const correctOptionText = currentOptions[currentCorrectIndex] || 'kh√¥ng x√°c ƒë·ªãnh';
      showError(`ƒê√°p √°n ƒë√∫ng l√†: ${correctOptionText}`);
      }
      
    // Ch·ªù 2 gi√¢y tr∆∞·ªõc khi chuy·ªÉn c√¢u h·ªèi ti·∫øp
    setTimeout(() => {
      // N·∫øu ƒë√£ ch∆°i ƒë·ªß s·ªë c√¢u h·ªèi, k·∫øt th√∫c game
      if (questionNumber >= maxQuestions) {
          endGame();
      } else {
        // Chuy·ªÉn sang c√¢u h·ªèi ti·∫øp theo
        setQuestionNumber(prev => prev + 1);
        loadNewQuestion();
      }
    }, 2000);
  };

  /**
   * X·ª≠ l√Ω khi h·∫øt th·ªùi gian
   */
  const handleTimeUp = () => {
    if (isAnswered || isGameOver) return;
    
    setIsAnswered(true);
    
    // ƒê·∫£m b·∫£o r·∫±ng c√≥ ƒë√°p √°n ƒë√∫ng ƒë·ªÉ hi·ªÉn th·ªã
    const correctOptionText = currentOptions[currentCorrectIndex] || 'kh√¥ng x√°c ƒë·ªãnh';
    showError(`H·∫øt gi·ªù! ƒê√°p √°n ƒë√∫ng l√†: ${correctOptionText}`);
    
    // Ch·ªù 2 gi√¢y tr∆∞·ªõc khi chuy·ªÉn c√¢u h·ªèi ti·∫øp
    setTimeout(() => {
    // N·∫øu ƒë√£ ch∆°i ƒë·ªß s·ªë c√¢u h·ªèi, k·∫øt th√∫c game
    if (questionNumber >= maxQuestions) {
        endGame();
    } else {
        // Chuy·ªÉn sang c√¢u h·ªèi ti·∫øp theo
        setQuestionNumber(prev => prev + 1);
        loadNewQuestion();
      }
      }, 2000);
  };

  /**
   * X·ª≠ l√Ω khi ƒë√≥ng modal
   */
  const handleCloseModal = () => {
    setShowModal(false);
    
    // N·∫øu ch∆∞a k·∫øt th√∫c game, t·∫£i c√¢u h·ªèi ti·∫øp theo
    if (!isGameOver && isAnswered) {
      setQuestionNumber(prev => prev + 1);
      setTimeout(() => {
        loadNewQuestion();
      }, 500);
    }
  };

  /**
   * K·∫øt th√∫c tr√≤ ch∆°i
   */
  const endGame = async () => {
    setIsGameOver(true);
    
    try {
      const gameStats = {
        correctAnswers,
        totalQuestions: maxQuestions,
        totalScore
      };
      
      // G·ª≠i k·∫øt qu·∫£ tr√≤ ch∆°i l√™n server n·∫øu c√≥ API endpoint
      let performanceMessage = '';
      try {
      const resultResponse = await knowledgeAPI.submitGameResult(gameStats);
        if (resultResponse && resultResponse.data && resultResponse.data.performanceMessage) {
          performanceMessage = resultResponse.data.performanceMessage;
        }
      } catch (error) {
        console.log('Kh√¥ng th·ªÉ g·ª≠i k·∫øt qu·∫£ tr√≤ ch∆°i:', error);
      }
      
      // N·∫øu kh√¥ng c√≥ performanceMessage t·ª´ server, t·ª± t·∫°o th√¥ng b√°o
      if (!performanceMessage) {
      const accuracyPercentage = (correctAnswers / maxQuestions) * 100;
        performanceMessage = accuracyPercentage >= 80 ? 'Xu·∫•t s·∫Øc! B·∫°n th·∫≠t th√¥ng minh!' :
                               accuracyPercentage >= 60 ? 'T·ªët l·∫Øm! Ti·∫øp t·ª•c c·ªë g·∫Øng nh√©!' :
                               accuracyPercentage >= 40 ? 'Kh√° t·ªët! H√£y h·ªçc th√™m nh√©!' :
                            'C·ªë g·∫Øng l√™n! B·∫°n c√≥ th·ªÉ l√†m t·ªët h∆°n!';
      }
      
      setModalContent({
        title: 'K·∫øt th√∫c tr√≤ ch∆°i!',
        message: `K·∫øt qu·∫£:\n‚úÖ C√¢u ƒë√∫ng: ${correctAnswers}/${maxQuestions}\nüíØ ƒêi·ªÉm s·ªë: ${totalScore}\n\n${performanceMessage}`,
        isGameOver: true
      });
      setShowModal(true);
    } catch (error) {
      console.error('L·ªói khi k·∫øt th√∫c tr√≤ ch∆°i:', error);
      
      // Fallback khi c√≥ l·ªói
      const accuracyPercentage = (correctAnswers / maxQuestions) * 100;
      const performanceMessage = accuracyPercentage >= 80 ? 'Xu·∫•t s·∫Øc! B·∫°n th·∫≠t th√¥ng minh!' :
                                 accuracyPercentage >= 60 ? 'T·ªët l·∫Øm! Ti·∫øp t·ª•c c·ªë g·∫Øng nh√©!' :
                                 accuracyPercentage >= 40 ? 'Kh√° t·ªët! H√£y h·ªçc th√™m nh√©!' :
                                 'C·ªë g·∫Øng l√™n! B·∫°n c√≥ th·ªÉ l√†m t·ªët h∆°n!';
                                 
      setModalContent({
        title: 'K·∫øt th√∫c tr√≤ ch∆°i!',
        message: `K·∫øt qu·∫£:\n‚úÖ C√¢u ƒë√∫ng: ${correctAnswers}/${maxQuestions}\nüíØ ƒêi·ªÉm s·ªë: ${totalScore}\n\n${performanceMessage}`,
        isGameOver: true
      });
      setShowModal(true);
    }
  };

  /**
   * X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i mu·ªën ch∆°i l·∫°i
   */
  const handlePlayAgain = () => {
    // Reset l·∫°i tr·∫°ng th√°i game
    setCurrentQuestion(null);
    setCurrentOptions([]);
    setCurrentCorrectIndex(-1);
    setSelectedAnswer(-1);
    setCorrectAnswers(0);
    setTotalScore(0);
    setQuestionNumber(1);
    setIsGameOver(false);
    setShowModal(false);
    setGameStarted(false);
    setIsAnswered(false);
    setUsedQuestionIds([]);
    
    // T·∫£i c√¢u h·ªèi m·ªõi
    loadNewQuestion();
  };

  return (
    <div className="quiz-screen">
      {/* Header */}
      <div className="quiz-header">
        <Button 
          variant="secondary"
          onClick={onBackHome}
        >
          üè† Trang ch·ªß
        </Button>
        <div className="quiz-stats">
          <span className="quiz-score">ƒêi·ªÉm: {totalScore}</span>
          <span className="quiz-count">C√¢u h·ªèi: {questionNumber}/{maxQuestions}</span>
          <span className="quiz-accuracy">ƒê√∫ng: {correctAnswers}/{questionNumber - (isAnswered ? 0 : 1)}</span>
        </div>
      </div>
      
      {/* Main Content */}
      <div className="quiz-content">
        {isLoading ? (
          <div className="loading-indicator">ƒêang t·∫£i c√¢u h·ªèi...</div>
        ) : currentQuestion ? (
          <>
            {/* Timer */}
            {gameStarted && !isAnswered && !isGameOver && (
              <Timer 
                key={timerKey.current}
                duration={GAME_CONFIG.KNOWLEDGE_QUIZ.TIME_PER_QUESTION} 
                onTimeUp={handleTimeUp}
                onTimeUpdate={handleTimeUpdate}
                isActive={!isAnswered && !isGameOver}
              />
            )}
            
            {/* Question */}
            <div className="question-container">
              <h3 className="question-text">{currentQuestion.question}</h3>
            </div>
            
            {/* Options */}
            <div className="options-container">
              {currentOptions.map((option, index) => (
                <button
                  key={index}
                  className={`option-button ${selectedAnswer === index ? 'selected' : ''} 
                             ${isAnswered ? (index === currentCorrectIndex ? 'correct' : 
                                            selectedAnswer === index ? 'incorrect' : '') : ''}`}
                  onClick={() => handleAnswerSelect(index)}
                  disabled={isAnswered || isGameOver}
                >
                  <span className="option-letter">
                    {String.fromCharCode(65 + index)}
                  </span>
                  <span className="option-text">
                    {option}
                  </span>
                </button>
              ))}
            </div>
            
            {/* Explanation */}
            {isAnswered && currentQuestion.explanation && (
              <div className="explanation">
                <h4>Gi·∫£i th√≠ch:</h4>
                <p>{currentQuestion.explanation}</p>
              </div>
            )}
          </>
        ) : (
          <div className="error-message">
            Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.
          </div>
        )}
      </div>
      
      {/* Modal */}
      <Modal
        isOpen={showModal}
        title={modalContent.title || ''}
        message={modalContent.message || ''}
        onClose={handleCloseModal}
        confirmText={modalContent.isGameOver ? "Ch∆°i l·∫°i" : ''}
        onConfirm={modalContent.isGameOver ? handlePlayAgain : undefined}
        cancelText={modalContent.isGameOver ? "V·ªÅ trang ch·ªß" : "Ti·∫øp t·ª•c"}
        onCancel={modalContent.isGameOver ? onBackHome : handleCloseModal}
      />
    </div>
  );
};

export default KnowledgeQuizScreen; 