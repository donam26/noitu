import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Button from '../common/Button';
import Modal from '../common/Modal';
import { showSuccess, showError, showInfo } from '../../utils/toast';
import { getAuthHeaders } from '../../utils/auth';
import './QuizManager.css';

/**
 * Component KnowledgeQuizManager - Qu·∫£n l√Ω CRUD c√¢u h·ªèi Vua Ki·∫øn Th·ª©c
 */
const KnowledgeQuizManager = () => {
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // State cho ph√¢n trang
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalQuestions, setTotalQuestions] = useState(0);
  const [searchTerm, setSearchTerm] = useState('');
  
  // State cho modal
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(null);

  // Form state
  const [formData, setFormData] = useState({
    question: '',
    options: ['', '', '', ''],
    correctAnswer: 0,
    explanation: '',
    category: '',
    difficulty: 'medium'
  });

  // API headers v·ªõi token
  const getHeaders = () => {
    const token = localStorage.getItem('adminToken');
    return {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    };
  };

  // L·∫•y danh s√°ch c√¢u h·ªèi t·ª´ API
  const fetchQuestions = async (signal) => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await axios.get(`http://localhost:3001/api/knowledge?page=${currentPage}&limit=5`, {
        ...getAuthHeaders(),
        signal
      });
      
      if (response.data.success) {
        setQuestions(response.data.data.questions);
        setTotalPages(response.data.data.pagination.pages);
        setTotalQuestions(response.data.data.pagination.total);
      } else {
        setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch c√¢u h·ªèi ki·∫øn th·ª©c');
      }
    } catch (error) {
      if (!axios.isCancel(error)) {
        console.error('L·ªói khi t·∫£i danh s√°ch c√¢u h·ªèi ki·∫øn th·ª©c:', error);
        setError('L·ªói k·∫øt n·ªëi ƒë·∫øn server');
      }
    } finally {
      setLoading(false);
    }
  };

  // Load c√¢u h·ªèi khi component mount v√† khi page thay ƒë·ªïi
  useEffect(() => {
    const controller = new AbortController();
    
    const loadData = async () => {
      fetchQuestions(controller.signal);
    };
    
    loadData();
    
    // Cleanup function ƒë·ªÉ h·ªßy request khi component unmount
    return () => {
      controller.abort();
    };
  }, [currentPage]); // Ch·ªâ g·ªçi l·∫°i khi currentPage thay ƒë·ªïi

  // Reload khi c√≥ s·ª± ki·ªán c·∫≠p nh·∫≠t t·ª´ b√™n ngo√†i
  useEffect(() => {
    const handleQuestionsUpdated = () => {
      console.log('üß† Nh·∫≠n s·ª± ki·ªán c√¢u h·ªèi ki·∫øn th·ª©c ƒë∆∞·ª£c c·∫≠p nh·∫≠t, reload d·ªØ li·ªáu...');
      fetchQuestions();
    };

    window.addEventListener('knowledgeQuestionsUpdated', handleQuestionsUpdated);

    return () => {
      window.removeEventListener('knowledgeQuestionsUpdated', handleQuestionsUpdated);
    };
  }, []);

  // Reset form
  const resetForm = () => {
    setFormData({
      question: '',
      options: ['', '', '', ''],
      correctAnswer: 0,
      explanation: '',
      category: '',
      difficulty: 'medium'
    });
    setCurrentQuestion(null);
  };

  // X·ª≠ l√Ω thay ƒë·ªïi form
  const handleFormChange = (e) => {
    const { name, value } = e.target;
    
    if (name === 'option0' || name === 'option1' || name === 'option2' || name === 'option3') {
      const index = parseInt(name.replace('option', ''));
      const newOptions = [...formData.options];
      newOptions[index] = value;
      
      setFormData({
        ...formData,
        options: newOptions
      });
    } else {
      setFormData({
        ...formData,
        [name]: name === 'correctAnswer' ? parseInt(value) : value
      });
    }
  };

  // X·ª≠ l√Ω m·ªü modal th√™m c√¢u h·ªèi
  const handleOpenAddModal = () => {
    resetForm();
    setShowAddModal(true);
  };

  // X·ª≠ l√Ω m·ªü modal ch·ªânh s·ª≠a c√¢u h·ªèi
  const handleOpenEditModal = (question) => {
    setCurrentQuestion(question);
    setFormData({
      question: question.question,
      options: question.options,
      correctAnswer: question.correct_answer,
      explanation: question.explanation || '',
      category: question.category || '',
      difficulty: question.difficulty || 'medium'
    });
    setShowEditModal(true);
  };

  // X·ª≠ l√Ω m·ªü modal x√≥a c√¢u h·ªèi
  const handleOpenDeleteModal = (question) => {
    setCurrentQuestion(question);
    setShowDeleteModal(true);
  };

  // X·ª≠ l√Ω th√™m c√¢u h·ªèi m·ªõi
  const handleAddQuestion = async () => {
    try {
      if (!formData.question || formData.options.some(opt => !opt)) {
        showError('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√¢u h·ªèi v√† c√°c ph∆∞∆°ng √°n tr·∫£ l·ªùi');
        return;
      }
      
      const response = await axios.post(
        'http://localhost:3001/api/knowledge',
        {
          question: formData.question,
          options: formData.options,
          correctAnswer: formData.correctAnswer,
          explanation: formData.explanation,
          category: formData.category,
          difficulty: formData.difficulty
        },
        getHeaders()
      );

      if (response.data.success) {
        showSuccess('Th√™m c√¢u h·ªèi ki·∫øn th·ª©c th√†nh c√¥ng');
        setShowAddModal(false);
        fetchQuestions();
      } else {
        showError('L·ªói khi th√™m c√¢u h·ªèi: ' + response.data.message);
      }
    } catch (error) {
      console.error('L·ªói khi th√™m c√¢u h·ªèi ki·∫øn th·ª©c:', error);
      showError('L·ªói k·∫øt n·ªëi ƒë·∫øn server');
    }
  };

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t c√¢u h·ªèi
  const handleUpdateQuestion = async () => {
    try {
      if (!formData.question || formData.options.some(opt => !opt)) {
        showError('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√¢u h·ªèi v√† c√°c ph∆∞∆°ng √°n tr·∫£ l·ªùi');
        return;
      }
      
      const response = await axios.put(
        `http://localhost:3001/api/knowledge/${currentQuestion.id}`,
        {
          question: formData.question,
          options: formData.options,
          correctAnswer: formData.correctAnswer,
          explanation: formData.explanation,
          category: formData.category,
          difficulty: formData.difficulty
        },
        getHeaders()
      );

      if (response.data.success) {
        showSuccess('C·∫≠p nh·∫≠t c√¢u h·ªèi ki·∫øn th·ª©c th√†nh c√¥ng');
        setShowEditModal(false);
        fetchQuestions();
      } else {
        showError('L·ªói khi c·∫≠p nh·∫≠t c√¢u h·ªèi: ' + response.data.message);
      }
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t c√¢u h·ªèi ki·∫øn th·ª©c:', error);
      showError('L·ªói k·∫øt n·ªëi ƒë·∫øn server');
    }
  };

  // X·ª≠ l√Ω x√≥a c√¢u h·ªèi
  const handleDeleteQuestion = async () => {
    try {
      const response = await axios.delete(
        `http://localhost:3001/api/knowledge/${currentQuestion.id}`,
        getHeaders()
      );
      
      if (response.data.success) {
        showSuccess('X√≥a c√¢u h·ªèi ki·∫øn th·ª©c th√†nh c√¥ng');
        setShowDeleteModal(false);
        fetchQuestions();
      } else {
        showError('L·ªói khi x√≥a c√¢u h·ªèi: ' + response.data.message);
      }
    } catch (error) {
      console.error('L·ªói khi x√≥a c√¢u h·ªèi ki·∫øn th·ª©c:', error);
      showError('L·ªói k·∫øt n·ªëi ƒë·∫øn server');
    }
  };

  // L·ªçc c√¢u h·ªèi theo search
  const filteredQuestions = questions.filter(q =>
    q.question.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Export d·ªØ li·ªáu
  const handleExport = () => {
    const dataStr = JSON.stringify(questions.map(({ id, ...q }) => ({
      question: q.question,
      options: q.options,
      correctAnswer: q.correct_answer,
      explanation: q.explanation || '',
      category: q.category || '',
      difficulty: q.difficulty || 'medium'
    })), null, 2);
    
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'knowledge_questions_export.json';
    link.click();
    
    showSuccess(`ƒê√£ export ${questions.length} c√¢u h·ªèi ki·∫øn th·ª©c!`);
  };

  return (
    <div className="quiz-manager">
      <div className="quiz-header">
        <div className="quiz-title">
          <h2>üß† Qu·∫£n l√Ω C√¢u h·ªèi Ki·∫øn Th·ª©c</h2>
          <p>T·ªïng s·ªë: {totalQuestions} c√¢u h·ªèi v·ªÅ khoa h·ªçc, thi√™n nhi√™n v√† vƒÉn h√≥a</p>
        </div>
        <div className="quiz-actions">
          <Button
            variant="secondary"
            onClick={handleExport}
            className="export-btn"
          >
            üì• Export JSON
          </Button>
          <Button
            variant="primary"
            onClick={handleOpenAddModal}
            className="add-btn"
          >
            ‚ûï Th√™m c√¢u h·ªèi
          </Button>
        </div>
      </div>

      {/* Search */}
      <div className="search-section">
        <input
          type="text"
          placeholder="üîç T√¨m ki·∫øm c√¢u h·ªèi..."
          value={searchTerm}
          onChange={(e) => {
            setSearchTerm(e.target.value);
            setCurrentPage(1);
          }}
          className="search-input"
        />
      </div>

      {/* Questions List */}
      {loading ? (
        <div className="loading">ƒêang t·∫£i...</div>
      ) : error ? (
        <div className="error">{error}</div>
      ) : (
        <>
          <div className="questions-list">
            {filteredQuestions.length > 0 ? (
              filteredQuestions.map((question, index) => (
                <div key={question.id} className="question-card">
                  <div className="question-header">
                    <div className="question-number">
                      #{(currentPage - 1) * 5 + index + 1}
                    </div>
                    <div className="question-actions">
                      <button
                        className="edit-btn"
                        onClick={() => handleOpenEditModal(question)}
                        title="Ch·ªânh s·ª≠a"
                      >
                        ‚úèÔ∏è
                      </button>
                      <button
                        className="delete-btn"
                        onClick={() => handleOpenDeleteModal(question)}
                        title="X√≥a"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                  
                  <div className="question-content">
                    <h4>{question.question}</h4>
                    <div className="options-grid">
                      {question.options.map((option, optIndex) => (
                        <div
                          key={optIndex}
                          className={`option-item ${
                            optIndex === question.correct_answer ? 'correct' : ''
                          }`}
                        >
                          <span className="option-letter">
                            {String.fromCharCode(65 + optIndex)}
                          </span>
                          <span className="option-text">{option}</span>
                          {optIndex === question.correct_answer && (
                            <span className="correct-badge">‚úì</span>
                          )}
                        </div>
                      ))}
                    </div>
                    {question.explanation && (
                      <div className="explanation">
                        <strong>üí° Gi·∫£i th√≠ch:</strong> {question.explanation}
                      </div>
                    )}
                    {question.category && (
                      <div className="category-tag">
                        <span className="tag">üè∑Ô∏è {question.category}</span>
                      </div>
                    )}
                  </div>
                </div>
              ))
            ) : (
              <div className="empty-state">
                <p>üîç Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o</p>
              </div>
            )}
          </div>

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="pagination">
              <Button
                variant="secondary"
                onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                disabled={currentPage === 1}
              >
                ‚Üê Tr∆∞·ªõc
              </Button>
              
              <span className="page-info">
                Trang {currentPage} / {totalPages}
              </span>
              
              <Button
                variant="secondary"
                onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                disabled={currentPage === totalPages}
              >
                Sau ‚Üí
              </Button>
            </div>
          )}
        </>
      )}

      {/* Add Modal */}
      <Modal
        title="‚ûï Th√™m c√¢u h·ªèi ki·∫øn th·ª©c"
        onClose={() => setShowAddModal(false)}
        onSubmit={handleAddQuestion}
        submitText="Th√™m c√¢u h·ªèi"
        show={showAddModal}
      >
        <div className="form-group">
          <label>C√¢u h·ªèi ki·∫øn th·ª©c *</label>
          <textarea
            name="question"
            value={formData.question}
            onChange={handleFormChange}
            placeholder="Nh·∫≠p c√¢u h·ªèi v·ªÅ khoa h·ªçc, thi√™n nhi√™n, vƒÉn h√≥a..."
            rows="3"
          />
        </div>

        <div className="form-group">
          <label>C√°c l·ª±a ch·ªçn *</label>
          {formData.options.map((option, index) => (
            <div key={index} className="option-input">
              <div className="option-prefix">
                <input
                  type="radio"
                  name="correctAnswer"
                  value={index}
                  checked={formData.correctAnswer === index}
                  onChange={handleFormChange}
                />
                <span>{String.fromCharCode(65 + index)}</span>
              </div>
              <input
                type="text"
                name={`option${index}`}
                value={option}
                onChange={handleFormChange}
                placeholder={`L·ª±a ch·ªçn ${String.fromCharCode(65 + index)}`}
              />
            </div>
          ))}
          <p className="help-text">üìå Ch·ªçn radio button b√™n c·∫°nh ƒë√°p √°n ƒë√∫ng</p>
        </div>

        <div className="form-group">
          <label>Danh m·ª•c (t√πy ch·ªçn)</label>
          <input
            type="text"
            name="category"
            value={formData.category}
            onChange={handleFormChange}
            placeholder="V√≠ d·ª•: Khoa h·ªçc, L·ªãch s·ª≠, ƒê·ªãa l√Ω, ..."
          />
        </div>

        <div className="form-group">
          <label>ƒê·ªô kh√≥</label>
          <select 
            name="difficulty"
            value={formData.difficulty}
            onChange={handleFormChange}
          >
            <option value="easy">D·ªÖ</option>
            <option value="medium">Trung b√¨nh</option>
            <option value="hard">Kh√≥</option>
          </select>
        </div>

        <div className="form-group">
          <label>Gi·∫£i th√≠ch (tu·ª≥ ch·ªçn)</label>
          <textarea
            name="explanation"
            value={formData.explanation}
            onChange={handleFormChange}
            placeholder="Gi·∫£i th√≠ch khoa h·ªçc chi ti·∫øt v·ªÅ ƒë√°p √°n ƒë√∫ng..."
            rows="2"
          />
        </div>
      </Modal>

      {/* Edit Modal */}
      <Modal
        title="‚úèÔ∏è Ch·ªânh s·ª≠a c√¢u h·ªèi ki·∫øn th·ª©c"
        onClose={() => setShowEditModal(false)}
        onSubmit={handleUpdateQuestion}
        submitText="C·∫≠p nh·∫≠t"
        show={showEditModal}
      >
        <div className="form-group">
          <label>C√¢u h·ªèi ki·∫øn th·ª©c *</label>
          <textarea
            name="question"
            value={formData.question}
            onChange={handleFormChange}
            placeholder="Nh·∫≠p c√¢u h·ªèi v·ªÅ khoa h·ªçc, thi√™n nhi√™n, vƒÉn h√≥a..."
            rows="3"
          />
        </div>

        <div className="form-group">
          <label>C√°c l·ª±a ch·ªçn *</label>
          {formData.options.map((option, index) => (
            <div key={index} className="option-input">
              <div className="option-prefix">
                <input
                  type="radio"
                  name="correctAnswer"
                  value={index}
                  checked={formData.correctAnswer === index}
                  onChange={handleFormChange}
                />
                <span>{String.fromCharCode(65 + index)}</span>
              </div>
              <input
                type="text"
                name={`option${index}`}
                value={option}
                onChange={handleFormChange}
                placeholder={`L·ª±a ch·ªçn ${String.fromCharCode(65 + index)}`}
              />
            </div>
          ))}
          <p className="help-text">üìå Ch·ªçn radio button b√™n c·∫°nh ƒë√°p √°n ƒë√∫ng</p>
        </div>

        <div className="form-group">
          <label>Danh m·ª•c (t√πy ch·ªçn)</label>
          <input
            type="text"
            name="category"
            value={formData.category}
            onChange={handleFormChange}
            placeholder="V√≠ d·ª•: Khoa h·ªçc, L·ªãch s·ª≠, ƒê·ªãa l√Ω, ..."
          />
        </div>

        <div className="form-group">
          <label>ƒê·ªô kh√≥</label>
          <select 
            name="difficulty"
            value={formData.difficulty}
            onChange={handleFormChange}
          >
            <option value="easy">D·ªÖ</option>
            <option value="medium">Trung b√¨nh</option>
            <option value="hard">Kh√≥</option>
          </select>
        </div>

        <div className="form-group">
          <label>Gi·∫£i th√≠ch (tu·ª≥ ch·ªçn)</label>
          <textarea
            name="explanation"
            value={formData.explanation}
            onChange={handleFormChange}
            placeholder="Gi·∫£i th√≠ch khoa h·ªçc chi ti·∫øt v·ªÅ ƒë√°p √°n ƒë√∫ng..."
            rows="2"
          />
        </div>
      </Modal>

      {/* Delete Modal */}
      <Modal
        title="üóëÔ∏è X√°c nh·∫≠n x√≥a c√¢u h·ªèi ki·∫øn th·ª©c"
        onClose={() => setShowDeleteModal(false)}
        onSubmit={handleDeleteQuestion}
        submitText="X√≥a c√¢u h·ªèi"
        submitVariant="danger"
        show={showDeleteModal}
      >
        <div className="question-preview">
          <p>B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a c√¢u h·ªèi:</p>
          <p><strong>{currentQuestion?.question}</strong></p>
          <p>H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.</p>
        </div>
      </Modal>
    </div>
  );
};

export default KnowledgeQuizManager; 