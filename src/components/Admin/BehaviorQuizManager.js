import React, { useState, useEffect } from 'react';
import Button from '../common/Button';
import Modal from '../common/Modal';
import { showSuccess, showError, showInfo } from '../../utils/toast';
import './QuizManager.css';
import { behaviorAPI } from '../../services/api';
import AIQuestionGenerator from './AIQuestionGenerator';

/**
 * Component BehaviorQuizManager - Qu·∫£n l√Ω CRUD c√¢u h·ªèi Vua ·ª®ng X·ª≠
 */
const BehaviorQuizManager = () => {
  const [questions, setQuestions] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [editingQuestion, setEditingQuestion] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [questionToDelete, setQuestionToDelete] = useState(null);
  const [showAIModal, setShowAIModal] = useState(false);
  const [loading, setLoading] = useState(false);
  const [totalQuestions, setTotalQuestions] = useState(0);
  const [totalPages, setTotalPages] = useState(1);

  const itemsPerPage = 5;

  // Kh·ªüi t·∫°o d·ªØ li·ªáu t·ª´ API
  useEffect(() => {
    const controller = new AbortController();
    
    const loadData = async () => {
      fetchQuestions(controller.signal);
    };
    
    loadData();
    
    // Cleanup function ƒë·ªÉ h·ªßy request khi component unmount
    return () => {
      controller.abort();
    };
  }, [currentPage]); // Ch·ªâ g·ªçi l·∫°i khi currentPage thay ƒë·ªïi

  // H√†m l·∫•y danh s√°ch c√¢u h·ªèi t·ª´ API
  const fetchQuestions = async (signal) => {
    setLoading(true);
    try {
      // S·ª≠ d·ª•ng service API thay v√¨ g·ªçi axios tr·ª±c ti·∫øp
      const response = await behaviorAPI.getQuestions(currentPage, itemsPerPage, {
        search: searchTerm
      });

      if (response.success) {
        const { questions, pagination } = response.data;
        setQuestions(questions);
        setTotalQuestions(pagination.total);
        setTotalPages(pagination.pages);
        console.log(`üìö ƒê√£ t·∫£i ${questions.length}/${pagination.total} c√¢u h·ªèi ·ª©ng x·ª≠`);
      } else {
        showError(response.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch c√¢u h·ªèi');
      }
    } catch (error) {
      console.error('L·ªói khi t·∫£i c√¢u h·ªèi ·ª©ng x·ª≠:', error);
      showError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau.');
    } finally {
      setLoading(false);
    }
  };

  // Form state
  const [formData, setFormData] = useState({
    question: '',
    options: ['', '', '', ''],
    correctAnswer: 0,
    explanation: '',
    category: '',
    difficulty: 'medium'
  });

  // Reset form
  const resetForm = () => {
    setFormData({
      question: '',
      options: ['', '', '', ''],
      correctAnswer: 0,
      explanation: '',
      category: '',
      difficulty: 'medium'
    });
    setEditingQuestion(null);
  };

  // M·ªü modal th√™m c√¢u h·ªèi
  const handleAdd = () => {
    resetForm();
    setShowModal(true);
  };

  // M·ªü modal s·ª≠a c√¢u h·ªèi
  const handleEdit = (question) => {
    const formattedQuestion = {
      ...question,
      correctAnswer: question.correct_answer,
      options: question.options || ['', '', '', '']
    };
    setFormData(formattedQuestion);
    setEditingQuestion(question);
    setShowModal(true);
  };

  // X√≥a c√¢u h·ªèi
  const handleDelete = (question) => {
    setQuestionToDelete(question);
    setShowDeleteConfirm(true);
  };

  const confirmDelete = async () => {
    try {
      // S·ª≠ d·ª•ng service API thay v√¨ g·ªçi axios tr·ª±c ti·∫øp
      const response = await behaviorAPI.deleteQuestion(questionToDelete.id);

      if (response.success) {
        console.log('‚úÖ ƒê√£ x√≥a c√¢u h·ªèi ·ª©ng x·ª≠ th√†nh c√¥ng');
        
        // C·∫≠p nh·∫≠t danh s√°ch c√¢u h·ªèi
        fetchQuestions();
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        showSuccess(response.message || 'ƒê√£ x√≥a c√¢u h·ªèi th√†nh c√¥ng!');
      } else {
        throw new Error(response.message || 'L·ªói khi x√≥a c√¢u h·ªèi ·ª©ng x·ª≠');
      }
    } catch (error) {
      console.error('‚ùå L·ªói:', error);
      showError(`Kh√¥ng th·ªÉ x√≥a: ${error.message}`);
    }
    
    setShowDeleteConfirm(false);
    setQuestionToDelete(null);
  };

  // L∆∞u c√¢u h·ªèi
  const handleSave = async () => {
    if (!formData.question.trim() || formData.options.some(opt => !opt.trim())) {
      showError('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!');
      return;
    }

    try {
      const questionData = {
        question: formData.question,
        options: formData.options,
        correctAnswer: formData.correctAnswer,
        explanation: formData.explanation,
        category: formData.category,
        difficulty: formData.difficulty
      };

      let response;

      if (editingQuestion) {
        // C·∫≠p nh·∫≠t c√¢u h·ªèi hi·ªán c√≥
        response = await behaviorAPI.updateQuestion(editingQuestion.id, questionData);

        if (response.success) {
          console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t c√¢u h·ªèi ·ª©ng x·ª≠ th√†nh c√¥ng');
          showSuccess(response.message || 'ƒê√£ c·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng!');
        } else {
          throw new Error(response.message || 'L·ªói khi c·∫≠p nh·∫≠t c√¢u h·ªèi');
        }
      } else {
        // Th√™m c√¢u h·ªèi m·ªõi
        response = await behaviorAPI.addQuestion(questionData);

        if (response.success) {
          console.log('‚úÖ ƒê√£ th√™m c√¢u h·ªèi ·ª©ng x·ª≠ m·ªõi th√†nh c√¥ng');
          showSuccess(response.message || 'ƒê√£ th√™m c√¢u h·ªèi m·ªõi th√†nh c√¥ng!');
        } else {
          throw new Error(response.message || 'L·ªói khi th√™m c√¢u h·ªèi');
        }
      }

      // C·∫≠p nh·∫≠t danh s√°ch c√¢u h·ªèi
      fetchQuestions();
      
      // ƒê√≥ng modal v√† reset form
      setShowModal(false);
      resetForm();
    } catch (error) {
      console.error('‚ùå L·ªói:', error);
      showError(`Kh√¥ng th·ªÉ l∆∞u: ${error.message}`);
    }
  };

  // C·∫≠p nh·∫≠t input c·ªßa form
  const updateFormData = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  // C·∫≠p nh·∫≠t option
  const updateOption = (index, value) => {
    const newOptions = [...formData.options];
    newOptions[index] = value;
    updateFormData('options', newOptions);
  };

  const handleSearch = () => {
    setCurrentPage(1); // Quay v·ªÅ trang 1 khi t√¨m ki·∫øm
    fetchQuestions();
  };

  const handleSearchKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const difficultyLabels = {
    easy: 'üü¢ D·ªÖ',
    medium: 'üü° Trung b√¨nh',
    hard: 'üî¥ Kh√≥'
  };

  // Render component
  return (
    <div className="quiz-manager">
      <div className="quiz-header">
        <div className="quiz-title">
          <h2>üß† Qu·∫£n l√Ω c√¢u h·ªèi "Vua ·ª®ng X·ª≠"</h2>
          <p>T·ªïng s·ªë c√¢u h·ªèi: {totalQuestions}</p>
        </div>
        
        <div className="search-box">
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            onKeyPress={handleSearchKeyPress}
            placeholder="T√¨m ki·∫øm c√¢u h·ªèi..."
          />
          <Button onClick={handleSearch}>üîç T√¨m ki·∫øm</Button>
        </div>
        
        <div className="quiz-actions">
          <Button onClick={() => setShowAIModal(true)} className="ai-btn">
            ü§ñ T·∫°o b·∫±ng AI
          </Button>
          <Button onClick={handleAdd} className="add-btn">
            ‚ûï Th√™m c√¢u h·ªèi
          </Button>
        </div>
      </div>

      {loading ? (
        <div className="loading">
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      ) : questions.length === 0 ? (
        <div className="empty-state">
          <p>Ch∆∞a c√≥ c√¢u h·ªèi n√†o. H√£y th√™m c√¢u h·ªèi m·ªõi!</p>
        </div>
      ) : (
        <>
          <div className="questions-list">
            {questions.map((question) => (
              <div key={question.id} className="question-card">
                <div className="question-header">
                  <div className="question-actions">
                    <button 
                      className="edit-btn" 
                      onClick={() => handleEdit(question)}
                      title="S·ª≠a c√¢u h·ªèi"
                    >
                      ‚úèÔ∏è
                    </button>
                    <button 
                      className="delete-btn" 
                      onClick={() => handleDelete(question)}
                      title="X√≥a c√¢u h·ªèi"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
                
                <div className="question-content">
                  <h3>{question.question}</h3>
                  <div className="options-list">
                    {question.options.map((option, index) => (
                      <div 
                        key={index} 
                        className={`option ${index === question.correct_answer ? 'correct' : ''}`}
                      >
                        {String.fromCharCode(65 + index)}. {option}
                        {index === question.correct_answer && <span className="correct-badge">‚úì</span>}
                      </div>
                    ))}
                  </div>
                  
                  {question.explanation && (
                    <div className="explanation">
                      <strong>Gi·∫£i th√≠ch:</strong> {question.explanation}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
          
          {/* Ph√¢n trang */}
          {totalPages > 1 && (
            <div className="pagination">
              <button
                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                disabled={currentPage <= 1}
              >
                &laquo; Tr∆∞·ªõc
              </button>
              <span>
                Trang {currentPage} / {totalPages}
              </span>
              <button
                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                disabled={currentPage >= totalPages}
              >
                Sau &raquo;
              </button>
            </div>
          )}
        </>
      )}

      {/* Modal th√™m/s·ª≠a c√¢u h·ªèi */}
      <Modal
        isOpen={showModal}
        onClose={() => setShowModal(false)}
        title={editingQuestion ? "S·ª≠a c√¢u h·ªèi" : "Th√™m c√¢u h·ªèi m·ªõi"}
      >
        <div className="question-form">
          <div className="form-group">
            <label htmlFor="question">C√¢u h·ªèi:</label>
            <textarea
              id="question"
              value={formData.question}
              onChange={(e) => updateFormData('question', e.target.value)}
              placeholder="Nh·∫≠p c√¢u h·ªèi..."
            />
          </div>
          
          <div className="form-group options-group">
            <label>C√°c ph∆∞∆°ng √°n tr·∫£ l·ªùi:</label>
            {formData.options.map((option, index) => (
              <div key={index} className="option-input">
                <span className="option-label">
                  {String.fromCharCode(65 + index)}
                </span>
                <input
                  type="text"
                  value={option}
                  onChange={(e) => updateOption(index, e.target.value)}
                  placeholder={`Ph∆∞∆°ng √°n ${String.fromCharCode(65 + index)}...`}
                />
                <input
                  type="radio"
                  name="correctAnswer"
                  value={index}
                  checked={formData.correctAnswer === index}
                  onChange={() => updateFormData('correctAnswer', index)}
                  title="Ch·ªçn ƒë√°p √°n ƒë√∫ng"
                />
              </div>
            ))}
          </div>
          
          <div className="form-row">
            <div className="form-group">
              <label htmlFor="category">Danh m·ª•c:</label>
              <input
                type="text"
                id="category"
                value={formData.category}
                onChange={(e) => updateFormData('category', e.target.value)}
                placeholder="Danh m·ª•c c√¢u h·ªèi (t√πy ch·ªçn)"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="difficulty">ƒê·ªô kh√≥:</label>
              <select
                id="difficulty"
                value={formData.difficulty}
                onChange={(e) => updateFormData('difficulty', e.target.value)}
              >
                <option value="easy">D·ªÖ</option>
                <option value="medium">Trung b√¨nh</option>
                <option value="hard">Kh√≥</option>
              </select>
            </div>
          </div>
          
          <div className="form-group">
            <label htmlFor="explanation">Gi·∫£i th√≠ch (kh√¥ng b·∫Øt bu·ªôc):</label>
            <textarea
              id="explanation"
              value={formData.explanation}
              onChange={(e) => updateFormData('explanation', e.target.value)}
              placeholder="Gi·∫£i th√≠ch ƒë√°p √°n..."
            />
          </div>
          
          <div className="form-actions">
            <Button onClick={() => setShowModal(false)} variant="secondary">
              H·ªßy b·ªè
            </Button>
            <Button onClick={handleSave}>
              {editingQuestion ? "L∆∞u thay ƒë·ªïi" : "Th√™m c√¢u h·ªèi"}
            </Button>
          </div>
        </div>
      </Modal>

      {/* Modal x√°c nh·∫≠n x√≥a */}
      <Modal
        isOpen={showDeleteConfirm}
        onClose={() => setShowDeleteConfirm(false)}
        title="X√°c nh·∫≠n x√≥a"
        size="small"
      >
        <div className="confirm-delete">
          <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√¢u h·ªèi n√†y kh√¥ng?</p>
          <div className="form-actions">
            <Button onClick={() => setShowDeleteConfirm(false)} variant="secondary">
              H·ªßy b·ªè
            </Button>
            <Button onClick={confirmDelete} variant="danger">
              X√≥a c√¢u h·ªèi
            </Button>
          </div>
        </div>
      </Modal>

      {/* Modal t·∫°o c√¢u h·ªèi b·∫±ng AI */}
      <Modal
        isOpen={showAIModal}
        onClose={() => setShowAIModal(false)}
        title="T·∫°o c√¢u h·ªèi Vua ·ª®ng X·ª≠ b·∫±ng AI"
      >
        <AIQuestionGenerator
          api={behaviorAPI}
          onQuestionsGenerated={() => {
            setShowAIModal(false);
            fetchQuestions();
          }}
          questionType="behavior"
        />
      </Modal>
    </div>
  );
};

export default BehaviorQuizManager; 