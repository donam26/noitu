import React, { useState, useEffect } from 'react';
import Button from '../common/Button';
import Modal from '../common/Modal';
import { showSuccess, showError, showInfo } from '../../utils/toast';
import './QuizManager.css';
import { quizAPI } from '../../services/api';

/**
 * Component QuizManager - Qu·∫£n l√Ω CRUD c√¢u h·ªèi H·ªèi Ngu
 */
const QuizManager = () => {
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalQuestions, setTotalQuestions] = useState(0);

  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(null);
  
  const [formData, setFormData] = useState({
    question: '',
    options: ['', '', '', ''],
    correctAnswer: 0,
    explanation: ''
  });

  const itemsPerPage = 10;
  
  // Fetch danh s√°ch c√¢u h·ªèi t·ª´ API
  const fetchQuestions = async (signal) => {
    setLoading(true);
    setError(null);
    try {
      const response = await quizAPI.getQuestions(currentPage, itemsPerPage);
      
      if (response.success) {
        const { questions, pagination } = response.data;
        setQuestions(questions);
        setTotalQuestions(pagination.total);
        setTotalPages(pagination.pages);
      } else {
        setError(response.message || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu');
      }
    } catch (error) {
      console.error('L·ªói khi t·∫£i c√¢u h·ªèi:', error);
      setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
    } finally {
      setLoading(false);
    }
  };
  
  // Load c√¢u h·ªèi khi component mount ho·∫∑c khi trang thay ƒë·ªïi
  useEffect(() => {
    const controller = new AbortController();
    
    const loadData = async () => {
      fetchQuestions(controller.signal);
    };
    
    loadData();
    
    // Cleanup function ƒë·ªÉ h·ªßy request khi component unmount
    return () => {
      controller.abort();
    };
  }, [currentPage]); // Ch·ªâ g·ªçi l·∫°i khi currentPage thay ƒë·ªïi
  
  // X·ª≠ l√Ω thay ƒë·ªïi form
  const handleFormChange = (e) => {
    const { name, value } = e.target;
    
    if (name === 'option0' || name === 'option1' || name === 'option2' || name === 'option3') {
      const index = parseInt(name.replace('option', ''));
      const newOptions = [...formData.options];
      newOptions[index] = value;
      
      setFormData({
        ...formData,
        options: newOptions
      });
    } else {
      setFormData({
        ...formData,
        [name]: name === 'correctAnswer' ? parseInt(value) : value
      });
    }
  };
  
  // X·ª≠ l√Ω m·ªü modal th√™m c√¢u h·ªèi
  const handleOpenAddModal = () => {
    setFormData({
      question: '',
      options: ['', '', '', ''],
      correctAnswer: 0,
      explanation: ''
    });
    setShowAddModal(true);
  };

  // X·ª≠ l√Ω m·ªü modal ch·ªânh s·ª≠a c√¢u h·ªèi
  const handleOpenEditModal = (question) => {
    setCurrentQuestion(question);
    setFormData({
      question: question.question,
      options: question.options,
      correctAnswer: question.correct_answer,
      explanation: question.explanation || ''
    });
    setShowEditModal(true);
  };

  // X·ª≠ l√Ω m·ªü modal x√≥a c√¢u h·ªèi
  const handleOpenDeleteModal = (question) => {
    setCurrentQuestion(question);
    setShowDeleteModal(true);
  };

  // X·ª≠ l√Ω th√™m c√¢u h·ªèi m·ªõi
  const handleAddQuestion = async () => {
    try {
      if (!formData.question || formData.options.some(opt => !opt)) {
        showError('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√¢u h·ªèi v√† c√°c ph∆∞∆°ng √°n tr·∫£ l·ªùi');
        return;
      }
      
      const questionData = {
        question: formData.question,
        options: formData.options,
        correctAnswer: formData.correctAnswer,
        explanation: formData.explanation
      };
      
      const response = await quizAPI.addQuestion(questionData);

      if (response.success) {
        showSuccess(response.message || 'Th√™m c√¢u h·ªèi th√†nh c√¥ng');
        setShowAddModal(false);
        fetchQuestions();
      } else {
        showError(response.message || 'L·ªói khi th√™m c√¢u h·ªèi');
      }
    } catch (error) {
      console.error('L·ªói khi th√™m c√¢u h·ªèi:', error);
      showError('L·ªói k·∫øt n·ªëi ƒë·∫øn server');
    }
  };

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t c√¢u h·ªèi
  const handleUpdateQuestion = async () => {
    try {
      if (!formData.question || formData.options.some(opt => !opt)) {
        showError('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√¢u h·ªèi v√† c√°c ph∆∞∆°ng √°n tr·∫£ l·ªùi');
        return;
      }
      
      const questionData = {
        question: formData.question,
        options: formData.options,
        correctAnswer: formData.correctAnswer,
        explanation: formData.explanation
      };
      
      const response = await quizAPI.updateQuestion(currentQuestion.id, questionData);

      if (response.success) {
        showSuccess(response.message || 'C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng');
        setShowEditModal(false);
        fetchQuestions();
      } else {
        showError(response.message || 'L·ªói khi c·∫≠p nh·∫≠t c√¢u h·ªèi');
      }
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t c√¢u h·ªèi:', error);
      showError('L·ªói k·∫øt n·ªëi ƒë·∫øn server');
    }
  };

  // X·ª≠ l√Ω x√≥a c√¢u h·ªèi
  const handleDeleteQuestion = async () => {
    try {
      const response = await quizAPI.deleteQuestion(currentQuestion.id);
      
      if (response.success) {
        showSuccess(response.message || 'X√≥a c√¢u h·ªèi th√†nh c√¥ng');
        setShowDeleteModal(false);
        fetchQuestions();
      } else {
        showError(response.message || 'L·ªói khi x√≥a c√¢u h·ªèi');
      }
    } catch (error) {
      console.error('L·ªói khi x√≥a c√¢u h·ªèi:', error);
      showError('L·ªói k·∫øt n·ªëi ƒë·∫øn server');
    }
  };

  return (
    <div className="quiz-manager">
      <div className="quiz-header">
        <div className="quiz-title">
          <h2>üìù Qu·∫£n l√Ω c√¢u h·ªèi "H·ªèi Ngu"</h2>
          <p>T·ªïng s·ªë c√¢u h·ªèi: {totalQuestions}</p>
        </div>
        <div className="quiz-actions">
          <Button onClick={handleOpenAddModal} className="add-btn">
            ‚ûï Th√™m c√¢u h·ªèi
          </Button>
        </div>
      </div>

      {loading ? (
        <div className="loading">ƒêang t·∫£i...</div>
      ) : error ? (
        <div className="error">{error}</div>
      ) : (
        <>
          <div className="questions-list">
            {questions.length === 0 ? (
              <div className="empty-state">
                <p>Ch∆∞a c√≥ c√¢u h·ªèi n√†o. H√£y th√™m c√¢u h·ªèi m·ªõi!</p>
              </div>
            ) : (
              questions.map((question, index) => (
                <div key={question.id} className="question-card">
                  <div className="question-header">
                    <span className="question-number">C√¢u h·ªèi #{question.id}</span>
                    <div className="question-actions">
                      <button
                        className="edit-btn"
                        onClick={() => handleOpenEditModal(question)}
                      >
                        ‚úèÔ∏è S·ª≠a
                      </button>
                      <button
                        className="delete-btn"
                        onClick={() => handleOpenDeleteModal(question)}
                      >
                        üóëÔ∏è X√≥a
                      </button>
                    </div>
                  </div>
                  <div className="question-content">
                    <h3>{question.question}</h3>
                    <div className="options-list">
                      {question.options.map((option, optionIndex) => (
                        <div
                          key={optionIndex}
                          className={`option ${
                            optionIndex === question.correct_answer ? 'correct' : ''
                          }`}
                        >
                          {String.fromCharCode(65 + optionIndex)}. {option}
                          {optionIndex === question.correct_answer && (
                            <span className="correct-badge">‚úì</span>
                          )}
                        </div>
                      ))}
                    </div>
                    {question.explanation && (
                      <div className="explanation">
                        <strong>Gi·∫£i th√≠ch:</strong> {question.explanation}
                      </div>
                    )}
                  </div>
                </div>
              ))
            )}
          </div>

          {totalPages > 1 && (
            <div className="pagination">
              <button
                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
              >
                &laquo; Tr∆∞·ªõc
              </button>
              <span>
                Trang {currentPage} / {totalPages}
              </span>
              <button
                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
              >
                Sau &raquo;
              </button>
            </div>
          )}
        </>
      )}

      {/* Modal th√™m c√¢u h·ªèi */}
      <Modal
        isOpen={showAddModal}
        onClose={() => setShowAddModal(false)}
        title="Th√™m c√¢u h·ªèi m·ªõi"
      >
        <div className="question-form">
          <div className="form-group">
            <label htmlFor="question">C√¢u h·ªèi:</label>
            <textarea
              id="question"
              name="question"
              value={formData.question}
              onChange={handleFormChange}
              placeholder="Nh·∫≠p c√¢u h·ªèi..."
            />
          </div>

          <div className="form-group options-group">
            <label>C√°c ph∆∞∆°ng √°n tr·∫£ l·ªùi:</label>
            {formData.options.map((option, index) => (
              <div key={index} className="option-input">
                <span className="option-label">
                  {String.fromCharCode(65 + index)}
                </span>
                <input
                  type="text"
                  name={`option${index}`}
                  value={option}
                  onChange={handleFormChange}
                  placeholder={`Ph∆∞∆°ng √°n ${String.fromCharCode(65 + index)}...`}
                />
                <input
                  type="radio"
                  name="correctAnswer"
                  value={index}
                  checked={formData.correctAnswer === index}
                  onChange={handleFormChange}
                  title="Ch·ªçn ƒë√°p √°n ƒë√∫ng"
                />
              </div>
            ))}
          </div>

          <div className="form-group">
            <label htmlFor="explanation">Gi·∫£i th√≠ch (kh√¥ng b·∫Øt bu·ªôc):</label>
            <textarea
              id="explanation"
              name="explanation"
              value={formData.explanation}
              onChange={handleFormChange}
              placeholder="Gi·∫£i th√≠ch ƒë√°p √°n..."
            />
          </div>

          <div className="form-actions">
            <Button onClick={() => setShowAddModal(false)} variant="secondary">
              H·ªßy b·ªè
            </Button>
            <Button onClick={handleAddQuestion}>L∆∞u c√¢u h·ªèi</Button>
          </div>
        </div>
      </Modal>

      {/* Modal ch·ªânh s·ª≠a c√¢u h·ªèi */}
      <Modal
        isOpen={showEditModal}
        onClose={() => setShowEditModal(false)}
        title="Ch·ªânh s·ª≠a c√¢u h·ªèi"
      >
        <div className="question-form">
          <div className="form-group">
            <label htmlFor="edit-question">C√¢u h·ªèi:</label>
            <textarea
              id="edit-question"
              name="question"
              value={formData.question}
              onChange={handleFormChange}
              placeholder="Nh·∫≠p c√¢u h·ªèi..."
            />
          </div>

          <div className="form-group options-group">
            <label>C√°c ph∆∞∆°ng √°n tr·∫£ l·ªùi:</label>
            {formData.options.map((option, index) => (
              <div key={index} className="option-input">
                <span className="option-label">
                  {String.fromCharCode(65 + index)}
                </span>
                <input
                  type="text"
                  name={`option${index}`}
                  value={option}
                  onChange={handleFormChange}
                  placeholder={`Ph∆∞∆°ng √°n ${String.fromCharCode(65 + index)}...`}
                />
                <input
                  type="radio"
                  name="correctAnswer"
                  value={index}
                  checked={formData.correctAnswer === index}
                  onChange={handleFormChange}
                  title="Ch·ªçn ƒë√°p √°n ƒë√∫ng"
                />
              </div>
            ))}
          </div>

          <div className="form-group">
            <label htmlFor="edit-explanation">Gi·∫£i th√≠ch (kh√¥ng b·∫Øt bu·ªôc):</label>
            <textarea
              id="edit-explanation"
              name="explanation"
              value={formData.explanation}
              onChange={handleFormChange}
              placeholder="Gi·∫£i th√≠ch ƒë√°p √°n..."
            />
          </div>

          <div className="form-actions">
            <Button onClick={() => setShowEditModal(false)} variant="secondary">
              H·ªßy b·ªè
            </Button>
            <Button onClick={handleUpdateQuestion}>L∆∞u thay ƒë·ªïi</Button>
          </div>
        </div>
      </Modal>

      {/* Modal x√°c nh·∫≠n x√≥a */}
      <Modal
        isOpen={showDeleteModal}
        onClose={() => setShowDeleteModal(false)}
        title="X√°c nh·∫≠n x√≥a"
        size="small"
      >
        <div className="confirm-delete">
          <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√¢u h·ªèi n√†y kh√¥ng?</p>
          <div className="form-actions">
            <Button onClick={() => setShowDeleteModal(false)} variant="secondary">
              H·ªßy b·ªè
            </Button>
            <Button onClick={handleDeleteQuestion} variant="danger">
              X√≥a c√¢u h·ªèi
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default QuizManager; 