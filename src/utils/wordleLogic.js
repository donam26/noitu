import { normalize, getRandomTargetWord, isValidWord, analyzeSyllableStructure } from '../data/wordleData';

// Keyboard layout ti·∫øng Vi·ªát
export const VIETNAMESE_KEYBOARD_ROWS = [
  ["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P"],
  ["A", "S", "D", "F", "G", "H", "J", "K", "L"],
  ["BACKSPACE", "Z", "X", "C", "V", "B", "N", "M", "ENTER"],
];

// C√°c tr·∫°ng th√°i c·ªßa ch·ªØ c√°i
export const LETTER_STATES = {
  CORRECT: "correct",     // üü© ƒê√∫ng v·ªã tr√≠
  PRESENT: "present",     // üü® C√≥ trong t·ª´ nh∆∞ng sai v·ªã tr√≠  
  ABSENT: "absent",       // ‚¨ú Kh√¥ng c√≥ trong t·ª´
  EMPTY: "empty"          // Ch∆∞a nh·∫≠p
};

// Game status
export const GAME_STATUS = {
  PLAYING: "playing",
  WON: "won", 
  LOST: "lost"
};

// T·∫°o game state ban ƒë·∫ßu
export const createInitialGameState = () => {
  const wordData = getNewWordData();
  return {
    board: Array.from({ length: 6 }, () => Array(7).fill("")),
    currentRow: 0,
    currentCol: 0,
    gameStatus: GAME_STATUS.PLAYING,
    targetWord: wordData.normalized,
    originalWord: wordData.original,
    letterStates: {},
    hintCount: 0,
    hintedLetters: new Set(),
    syllableHint: analyzeSyllableStructure(wordData.original),
    startTime: Date.now(),
    finishTime: null
  };
};

// L·∫•y t·ª´ m·ªõi ƒë·ªÉ ƒëo√°n
export const getNewWordData = () => {
  const original = getRandomTargetWord();
  const normalized = normalize(original);
  return { original, normalized };
};

// Ki·ªÉm tra guess v√† tr·∫£ v·ªÅ tr·∫°ng th√°i c·ªßa t·ª´ng ch·ªØ c√°i
export const checkGuess = (guess, targetWord) => {
  const result = Array(7).fill(LETTER_STATES.ABSENT);
  const targetLetters = targetWord.split("");
  const guessLetters = guess.split("");

  // ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói ch·ªØ c√°i trong target word
  const targetLetterCount = {};
  for (const letter of targetLetters) {
    targetLetterCount[letter] = (targetLetterCount[letter] || 0) + 1;
  }

  // ƒê·∫ßu ti√™n, ƒë√°nh d·∫•u c√°c ch·ªØ c√°i ƒë√∫ng v·ªã tr√≠ (correct)
  for (let i = 0; i < 7; i++) {
    if (guessLetters[i] === targetLetters[i]) {
      result[i] = LETTER_STATES.CORRECT;
      targetLetterCount[guessLetters[i]]--;
    }
  }

  // Sau ƒë√≥, ƒë√°nh d·∫•u c√°c ch·ªØ c√°i c√≥ trong t·ª´ nh∆∞ng sai v·ªã tr√≠ (present)
  for (let i = 0; i < 7; i++) {
    if (result[i] !== LETTER_STATES.CORRECT && targetLetterCount[guessLetters[i]] > 0) {
      result[i] = LETTER_STATES.PRESENT;
      targetLetterCount[guessLetters[i]]--;
    }
  }

  return result;
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c√°c ch·ªØ c√°i tr√™n b√†n ph√≠m
export const updateLetterStates = (currentStates, guess, guessResult) => {
  const newStates = { ...currentStates };
  
  guess.split("").forEach((letter, index) => {
    const state = guessResult[index];
    const currentState = newStates[letter];
    
    // ∆Øu ti√™n: correct > present > absent
    if (!currentState) {
      newStates[letter] = state;
    } else if (currentState === LETTER_STATES.ABSENT && state !== LETTER_STATES.ABSENT) {
      newStates[letter] = state;
    } else if (currentState === LETTER_STATES.PRESENT && state === LETTER_STATES.CORRECT) {
      newStates[letter] = LETTER_STATES.CORRECT;
    }
  });
  
  return newStates;
};

// X·ª≠ l√Ω nh·∫≠p ch·ªØ c√°i
export const handleLetterInput = (gameState, letter) => {
  if (gameState.gameStatus !== GAME_STATUS.PLAYING) return gameState;
  if (gameState.currentCol >= 7) return gameState;

  const newBoard = gameState.board.map(row => [...row]);
  newBoard[gameState.currentRow][gameState.currentCol] = letter;

  return {
    ...gameState,
    board: newBoard,
    currentCol: gameState.currentCol + 1
  };
};

// X·ª≠ l√Ω x√≥a ch·ªØ c√°i
export const handleBackspace = (gameState) => {
  if (gameState.gameStatus !== GAME_STATUS.PLAYING) return gameState;
  if (gameState.currentCol <= 0) return gameState;

  const newBoard = gameState.board.map(row => [...row]);
  newBoard[gameState.currentRow][gameState.currentCol - 1] = "";

  return {
    ...gameState,
    board: newBoard,
    currentCol: gameState.currentCol - 1
  };
};

// X·ª≠ l√Ω submit guess
export const handleSubmitGuess = (gameState) => {
  if (gameState.gameStatus !== GAME_STATUS.PLAYING) return { gameState, error: null };
  
  const guess = gameState.board[gameState.currentRow].join("");
  
  // Ki·ªÉm tra ƒë·ªô d√†i
  if (guess.length !== 7) {
    return { 
      gameState, 
      error: "T·ª´ ph·∫£i c√≥ ƒë·ªß 7 ch·ªØ c√°i!" 
    };
  }

  // Ki·ªÉm tra t·ª´ c√≥ h·ª£p l·ªá kh√¥ng
  if (!isValidWord(guess)) {
    // X√≥a h√†ng hi·ªán t·∫°i v√† reset c·ªôt
    const newBoard = gameState.board.map((row, index) => 
      index === gameState.currentRow ? Array(7).fill("") : [...row]
    );
    
    return {
      gameState: {
        ...gameState,
        board: newBoard,
        currentCol: 0
      },
      error: "T·ª´ kh√¥ng t·ªìn t·∫°i trong t·ª´ ƒëi·ªÉn!"
    };
  }

  // Ki·ªÉm tra k·∫øt qu·∫£
  const guessResult = checkGuess(guess, gameState.targetWord);
  const newLetterStates = updateLetterStates(gameState.letterStates, guess, guessResult);
  
  // Ki·ªÉm tra th·∫Øng
  const isWin = guess === gameState.targetWord;
  const isLastRow = gameState.currentRow === 5;
  const newGameStatus = isWin ? GAME_STATUS.WON : (isLastRow ? GAME_STATUS.LOST : GAME_STATUS.PLAYING);

  return {
    gameState: {
      ...gameState,
      letterStates: newLetterStates,
      currentRow: gameState.currentRow + 1,
      currentCol: 0,
      gameStatus: newGameStatus,
      finishTime: (isWin || isLastRow) ? Date.now() : null
    },
    error: null,
    isWin,
    guessResult
  };
};

// X·ª≠ l√Ω g·ª£i √Ω
export const handleHint = (gameState) => {
  if (gameState.hintCount >= 3) {
    return { 
      gameState, 
      hintMessage: "B·∫°n ƒë√£ h·∫øt l∆∞·ª£t g·ª£i √Ω!" 
    };
  }

  // L·∫•y t·∫•t c·∫£ ch·ªØ c√°i ƒë√£ ƒëo√°n
  const guessedLetters = new Set(
    gameState.board
      .slice(0, gameState.currentRow)
      .flat()
      .filter(letter => letter !== "")
  );

  // T√¨m ch·ªØ c√°i ch∆∞a ƒëo√°n trong target word
  const usedLetters = new Set([
    ...guessedLetters,
    ...Object.keys(gameState.letterStates),
    ...gameState.hintedLetters
  ]);

  const targetLetters = Array.from(new Set(gameState.targetWord.split("")));
  const availableLetters = targetLetters.filter(letter => !usedLetters.has(letter));

  if (availableLetters.length > 0) {
    const randomLetter = availableLetters[Math.floor(Math.random() * availableLetters.length)];
    const newHintedLetters = new Set(gameState.hintedLetters);
    newHintedLetters.add(randomLetter);

    return {
      gameState: {
        ...gameState,
        hintCount: gameState.hintCount + 1,
        hintedLetters: newHintedLetters
      },
      hintMessage: `G·ª£i √Ω: Ch·ªØ "${randomLetter}" c√≥ trong t·ª´!`
    };
  } else {
    return {
      gameState: {
        ...gameState,
        hintCount: gameState.hintCount + 1
      },
      hintMessage: "Kh√¥ng c√≤n ch·ªØ n√†o ƒë·ªÉ g·ª£i √Ω!"
    };
  }
};

// T√≠nh th·ªùi gian ƒë√£ ch∆°i
export const getElapsedTime = (startTime, finishTime) => {
  if (startTime && finishTime) {
    const timeInSeconds = Math.floor((finishTime - startTime) / 1000);
    const minutes = Math.floor(timeInSeconds / 60);
    const seconds = timeInSeconds % 60;
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  }
  return null;
}; 