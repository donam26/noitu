#!/usr/bin/env node

/**
 * Script ch·∫°y seeder - t·∫°o d·ªØ li·ªáu m·∫´u cho database
 * 
 * S·ª≠ d·ª•ng:
 * - node seed.js                 : Ch·∫°y t·∫•t c·∫£ seeders
 * - node seed.js admin           : Ch·ªâ ch·∫°y admin seeder
 * - node seed.js quiz            : Ch·ªâ ch·∫°y quiz seeder
 * - node seed.js behavior        : Ch·ªâ ch·∫°y behavior seeder
 * - node seed.js knowledge       : Ch·ªâ ch·∫°y knowledge seeder
 * - node seed.js wordle          : Ch·ªâ ch·∫°y wordle seeder
 * - node seed.js --force         : B·∫Øt bu·ªôc ch·∫°y l·∫°i seeder k·ªÉ c·∫£ khi ƒë√£ c√≥ d·ªØ li·ªáu
 */

const { sequelize } = require('./src/models');
const seeders = require('./src/seeders');
const { Admin, QuizQuestion, BehaviorQuestion, KnowledgeQuestion, WordleWord } = require('./src/models');

// L·∫•y tham s·ªë d√≤ng l·ªánh
const args = process.argv.slice(2);
const seedType = args[0] && !args[0].startsWith('--') ? args[0].toLowerCase() : 'all';
const force = args.includes('--force');

// H√†m th·ª±c hi·ªán vi·ªác reset m·ªôt model
const resetModel = async (model, modelName) => {
  if (force) {
    try {
      await model.destroy({ where: {}, truncate: true, cascade: true });
      console.log(`üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu ${modelName} c≈©`);
    } catch (error) {
      console.error(`‚ùå L·ªói khi x√≥a d·ªØ li·ªáu ${modelName}:`, error.message);
    }
  }
};

// B·∫Øt ƒë·∫ßu seeding
async function startSeeding() {
  try {
    // Ki·ªÉm tra k·∫øt n·ªëi database
    await sequelize.authenticate();
    console.log('‚úÖ K·∫øt n·ªëi ƒë·∫øn database th√†nh c√¥ng.\n');
    
    // Reset models n·∫øu c√≥ tham s·ªë --force
    if (force) {
      console.log('‚ö†Ô∏è Ch·∫ø ƒë·ªô FORCE ƒë∆∞·ª£c k√≠ch ho·∫°t - s·∫Ω x√≥a d·ªØ li·ªáu c≈©\n');
      
      if (seedType === 'all' || seedType === 'admin') {
        await resetModel(Admin, 'Admin');
      }
      if (seedType === 'all' || seedType === 'quiz') {
        await resetModel(QuizQuestion, 'Quiz');
      }
      if (seedType === 'all' || seedType === 'behavior') {
        await resetModel(BehaviorQuestion, 'Behavior');
      }
      if (seedType === 'all' || seedType === 'knowledge') {
        await resetModel(KnowledgeQuestion, 'Knowledge');
      }
      if (seedType === 'all' || seedType === 'wordle') {
        await resetModel(WordleWord, 'Wordle');
      }
    }
    
    // Ch·∫°y seeders theo tham s·ªë
    if (seedType === 'all') {
      await seeders.runSeeders();
    } else if (seedType === 'admin') {
      await seeders.seedAdmins();
    } else if (seedType === 'quiz') {
      await seeders.seedQuizQuestions();
    } else if (seedType === 'behavior') {
      await seeders.seedBehaviorQuestions();
    } else if (seedType === 'knowledge') {
      await seeders.seedKnowledgeQuestions();
    } else if (seedType === 'wordle') {
      await seeders.seedWordleWords();
    } else {
      console.error(`‚ùå Lo·∫°i seeder kh√¥ng h·ª£p l·ªá: ${seedType}`);
      console.log('\nC√°ch s·ª≠ d·ª•ng:');
      console.log('- node seed.js                 : Ch·∫°y t·∫•t c·∫£ seeders');
      console.log('- node seed.js admin           : Ch·ªâ ch·∫°y admin seeder');
      console.log('- node seed.js quiz            : Ch·ªâ ch·∫°y quiz seeder');
      console.log('- node seed.js behavior        : Ch·ªâ ch·∫°y behavior seeder');
      console.log('- node seed.js knowledge       : Ch·ªâ ch·∫°y knowledge seeder');
      console.log('- node seed.js wordle          : Ch·ªâ ch·∫°y wordle seeder');
      console.log('- node seed.js --force         : B·∫Øt bu·ªôc ch·∫°y l·∫°i seeder');
      process.exit(1);
    }
    
    // ƒê√≥ng k·∫øt n·ªëi khi ho√†n t·∫•t
    await sequelize.close();
    console.log('\nüëã Seeding ho√†n t·∫•t v√† k·∫øt n·ªëi database ƒë√£ ƒë√≥ng.');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh seeding:', error);
    process.exit(1);
  }
}

// B·∫Øt ƒë·∫ßu qu√° tr√¨nh seeding
startSeeding(); 